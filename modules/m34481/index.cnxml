<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Dragging Objects between Containers</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m34481</md:content-id>
  <md:title>Dragging Objects between Containers</md:title>
  <md:abstract>Learn how to drag objects between containers while giving each container the ability to either accept or reject the drop based on the type of object being dropped.</md:abstract>
  <md:uuid>bbff460b-8196-4a45-93cf-c43266d4c4da</md:uuid>
</metadata>

<content>














<note id="note1000" type="miscellaneous">





	

<emphasis id="Click" effect="bold">

Click

</emphasis>

 

<link id="a1000" url="DragAndDrop04.html">

DragAndDrop04

</link>


to run this ActionScript program. 

<emphasis id="em1000" effect="italics">

(Click the "Back" button in your browser
to return to this page.)

</emphasis>



</note>







<section id="h11000">
<title>
Table of Contents

</title>





<list id="ul1000" list-type="bulleted">

  

<item id="li1000">
<link id="a1001" target-id="Preface">

Preface

</link>

 
    

<list id="ul1001" list-type="bulleted">

      

<item id="li1001">
<link id="a1002" target-id="General">

General

</link>


</item>


      

<item id="li1002">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>

 
        

<list id="ul1002" list-type="bulleted">

          

<item id="li1003">
<link id="a1004" target-id="Figures">

Figures

</link>


</item>


          

<item id="li1004">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>


        

</list>


      

</item>


      

<item id="li1005">
<link id="a1006" target-id="Supplementary_material">

Supplemental material

</link>


</item>


    

</list>


  

</item>


  

<item id="li1006">
<link id="a1007" target-id="GeneralBackgroundInformation">

General background information

</link>


</item>


  

<item id="li1007">
<link id="a1008" target-id="Preview">

Preview

</link>


</item>


  

<item id="li1008">
<link id="a1009" target-id="DiscussionandSamplePrograms">

Discussion and sample code

</link>


    

<list id="ul1003" list-type="bulleted">

      

<item id="li1009">
<link id="a1010" target-id="MXML">

The MXML code

</link>


</item>


      

<item id="li1010">
<link id="a1011" target-id="The_ActionScript_code">

The ActionScript code

</link>


</item>


    

</list>


  

</item>


  

<item id="li1011">
<link id="a1012" target-id="Runtheprogram">

Run the program

</link>


</item>


  

<item id="li1012">
<link id="a1013" target-id="Resources">

Resources

</link>


</item>


  

<item id="li1013">
<link id="a1014" target-id="CompleteProgramListings">

Complete program listings

</link>


</item>


	

<item id="li1014">
<link id="a1015" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>







</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>







<section id="h21000">
<title>
<emphasis id="General" effect="bold">

General

</emphasis>


</title>



        

<note id="note1001" type="miscellaneous">


          


            


              

All references to ActionScript in this lesson are 
			  references to version 3 or later. 

</note>

            


          



        






<para id="p1000">
This tutorial lesson is 
part of a series of lessons dedicated to object-oriented programming 
(OOP) with ActionScript.

</para>





<para id="p1001">
<emphasis id="strong1000" effect="bold">
Several ways to create and launch ActionScript 
programs

</emphasis>
</para>





<para id="p1002">
There are several ways to 
create and launch programs written in the ActionScript programming language. 
Most of the lessons in this series will use Adobe Flex as the launch pad for the 
sample ActionScript programs.

</para>





<para id="p1003">
An earlier lesson titled 


<emphasis id="strong1001" effect="bold">
The Default 
Application Container

</emphasis>
 provided information on how to get started programming 
with Adobe's Flex Builder 3. 

<emphasis id="em1001" effect="italics">
(See 

<link id="a1016" url="http://www.dickbaldwin.com/tocFlex.htm">

Baldwin's Flex programming website

</link>

.)

</emphasis>
 
You should study that lesson before embarking on the lessons in this series.

</para>





<para id="p1004">
<emphasis id="strong1002" effect="bold">
Some understanding of Flex MXML will be required

</emphasis>
</para>





<para id="p1005">
I also recommend that you 
study all of the lessons on Baldwin's Flex programming website in parallel with 
your study of these ActionScript lessons. Eventually you will probably need to 
understand both ActionScript and Flex and the relationships that exist between 
them in order to become a successful ActionScript programmer.

</para>





<para id="p1006">
<emphasis id="strong1003" effect="bold">
Will emphasize ActionScript code

</emphasis>
</para>





<para id="p1007">
It is often possible to use 
either ActionScript code or Flex MXML code to achieve the same result. Insofar 
as this series of lessons is concerned, the emphasis will be on ActionScript 
code even in those cases where Flex MXML code may be a suitable alternative.

</para>





</section>
<section id="h21001">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>





<para id="p1008">
I recommend that you open another copy of this document in a separate browser 
window and use the following links to easily find and view the figures and 
listings while you are reading about them.

</para>





<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>




<list id="ul1004" list-type="bulleted">

  

<item id="li1015">
<link id="a1017" target-id="Figure_1">

Figure 1

</link>

. Program output at startup. 

</item>


  

<item id="li1016">
<link id="a1018" target-id="Figure_2">

Figure 2

</link>

. Project file structure. 

</item>


  

<item id="li1017">
<link id="a1019" target-id="Figure_3">

Figure 3

</link>

. Results of dragging objects. 

</item>


  

<item id="li1018">
<link id="a1020" target-id="Figure_4">

Figure 4

</link>

. Result of droping the TextArea into the 
  middle Canvas. 

</item>




</list>





</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1005" list-type="bulleted">

  

<item id="li1019">
<link id="a1021" target-id="Listing_1">

Listing 1

</link>

. The MXML code.

</item>


  

<item id="li1020">
<link id="a1022" target-id="Listing_2">

Listing 2

</link>

. Beginning of the Driver class.

</item>


  

<item id="li1021">
<link id="a1023" target-id="Listing_3">

Listing 3

</link>

. Beginning of the creationComplete 
  event handler.

</item>


  

<item id="li1022">
<link id="a1024" target-id="Listing_4">

Listing 4

</link>

. Register a mouseDown event listener on 
  each draggable object.

</item>


  

<item id="li1023">
<link id="a1025" target-id="Listing_5">

Listing 5

</link>

. The beginning of the mouseDown event 
  handler.

</item>


  

<item id="li1024">
<link id="a1026" target-id="Listing_6">

Listing 6

</link>

. Get the name of the class from which 
  the drag initiator was instantiated.

</item>


  

<item id="li1025">
<link id="a1027" target-id="Listing_7">

Listing 7

</link>

. Populate a new DragSource object with 
  the drag initiator and a format string.

</item>


  

<item id="li1026">
<link id="a1028" target-id="Listing_8">

Listing 8

</link>

. Initiate the drag and drop operation.

</item>


  

<item id="li1027">
<link id="a1029" target-id="Listing_9">

Listing 9

</link>

. Register a different dragEnter event 
  handler on each Canvas object.

</item>


  

<item id="li1028">
<link id="a1030" target-id="Listing_10">

Listing 10

</link>

. Register the same dragDrop event 
  handler on all three Canvas objects.

</item>


  

<item id="li1029">
<link id="a1031" target-id="Listing_11">

Listing 11

</link>

. A dragEnter event handler for the 
  top Canvas object.

</item>


  

<item id="li1030">
<link id="a1032" target-id="Listing_12">

Listing 12

</link>

. The dragDrop event handler.

</item>


  

<item id="li1031">
<link id="a1033" target-id="Listing_13">

Listing 13

</link>

. The MXML code for the program named 
  DragAndDrop04.

</item>


  

<item id="li1032">
<link id="a1034" target-id="Listing_14">

Listing 14

</link>

. The ActionScript code for the 
  program named DragAndDrop04.

</item>




</list>





</section>
</section>
<section id="h21002">
<title>
<emphasis id="Supplementary_material" effect="bold">

Supplemental material

</emphasis>


</title>





<para id="p1009">
I recommend that you also 
study the other lessons in my extensive collection of online programming 
tutorials. You will find a consolidated index at 

<link id="a1035" url="http://www.dickbaldwin.com/toc.htm">

www.DickBaldwin.com

</link>

.

</para>





</section>
</section>
<section id="h11002">
<title>
<emphasis id="GeneralBackgroundInformation" effect="bold">

General background information

</emphasis>


</title>





<para id="p1010">
In the earlier lesson titled 

<emphasis id="strong1004" effect="bold">
Drag and Drop Basics

</emphasis>
, you learned the basics of writing ActionScript 3 code 
to provide a drag and drop capability. In this lesson, you will expand on that 
knowledge by learning how to drag objects from one container to another 
container while 
giving each container the ability to either accept or reject the drop based on 
the type of object being dropped.

</para>





<para id="p1011">
<emphasis id="strong1005" effect="bold">
Functions, classes, methods, and events

</emphasis>
</para>





<para id="p1012">
The sample program that I will explain in this lesson will use the following 
functions, classes, methods, and events plus others as well:

</para>




<list id="ul1006" list-type="bulleted">

  

<item id="li1033">
flash.utils.getQualifiedClassName top level function

</item>


  

<item id="li1034">
MouseEvent class 
    

<list id="ul1007" list-type="bulleted">

      

<item id="li1035">
MouseDown event

</item>


    

</list>


  

</item>


  

<item id="li1036">
DragEvent class 
    

<list id="ul1008" list-type="bulleted">

      

<item id="li1037">
dragDrop event

</item>


      

<item id="li1038">
dragEnter event

</item>


    

</list>


  

</item>


  

<item id="li1039">
DragManager class 
    

<list id="ul1009" list-type="bulleted">

      

<item id="li1040">
acceptDragDrop method

</item>


      

<item id="li1041">
doDrag method

</item>


    

</list>


  

</item>


  

<item id="li1042">
DragSource class 
    

<list id="ul1010" list-type="bulleted">

      

<item id="li1043">
addData method

</item>


      

<item id="li1044">
hasFormat method

</item>


    

</list>


  

</item>




</list>





</section>
<section id="h11003">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>





<para id="p1013">
In this lesson, I will explain how to drag and drop components from one 
container into another container while giving the receiving container the ability to accept 
or reject the drop on the basis of the type of object being dragged.

</para>





<para id="p1014">
<emphasis id="strong1006" effect="bold">
Program output at startup

</emphasis>
</para>





<para id="p1015">
Figure 1 shows the program output at startup.

</para>





<figure id="figure1000" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_1" effect="bold">
</emphasis>
Program output at startup.
</title>





<media id="media1000" alt="Missing Image" display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/as0142a.jpg" width="218" height="773"/>
</media>




<caption>Program output at startup.</caption>
</figure>







<para id="p1016">
<emphasis id="strong1007" effect="bold">
Three Canvas objects in a VBox object

</emphasis>
</para>





<para id="p1017">
The program places three 

<emphasis id="strong1008" effect="bold">
Canvas

</emphasis>
 objects in a 

<emphasis id="strong1009" effect="bold">
VBox

</emphasis>
 object as shown in Figure 
1. It places two Image objects in one of the 

<emphasis id="strong1010" effect="bold">
Canvas

</emphasis>
 objects. The Image objects 
are populated with the contents of the following two image files, which are 
shown in the project file structure in Figure 2.

</para>




<list id="ul1011" list-type="bulleted">

  

<item id="li1045">
butterfly.jpg

</item>


  

<item id="li1046">
frog.jpg

</item>




</list>





<figure id="figure1001" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_2" effect="bold">
</emphasis>
Project file structure.
</title>





<media id="media1001" alt="Missing Image" display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/as0142d.jpg" width="246" height="251"/>
</media>




<caption>Project file structure.</caption>
</figure>







<para id="p1018">
The image of the project file structure shown in Figure 2 was taken from the 
Flex Builder 3 Navigator pane.

</para>





<para id="p1019">
The program also places a 

<emphasis id="strong1011" effect="bold">
Button

</emphasis>
 object in the middle 


<emphasis id="strong1012" effect="bold">
Canvas

</emphasis>
 object shown in 
Figure 1, and places a 

<emphasis id="strong1013" effect="bold">
TextArea

</emphasis>
 object in the bottom 

<emphasis id="strong1014" effect="bold">
Canvas

</emphasis>
 object.

</para>





<para id="p1020">
<emphasis id="strong1015" effect="bold">
Draggable objects

</emphasis>
</para>





<para id="p1021">
The two Image objects as well as the 

<emphasis id="strong1016" effect="bold">
Button

</emphasis>
 object and the 


<emphasis id="strong1017" effect="bold">
TextArea

</emphasis>
 object 
are all draggable.

</para>





<para id="p1022">
<emphasis id="strong1018" effect="bold">
The Canvas objects are labeled

</emphasis>
</para>





<para id="p1023">
The program places a 

<emphasis id="strong1019" effect="bold">
Label

</emphasis>
 object at the top of each 

<emphasis id="strong1020" effect="bold">
Canvas

</emphasis>
 object. The 
labels are for information purposes and are not draggable.

</para>





<para id="p1024">
<emphasis id="strong1021" effect="bold">
Allowable drop zones

</emphasis>
</para>





<para id="p1025">
Each of the four draggable objects can be dragged and dropped within 
two of the three 

<emphasis id="strong1022" effect="bold">
Canvas

</emphasis>
 objects so long as the mouse pointer is inside the


<emphasis id="strong1023" effect="bold">
Canvas

</emphasis>
 object when the drop occurs.

</para>





<para id="p1026">
None of the draggable objects can be dropped in all three of the 

<emphasis id="strong1024" effect="bold">
Canvas

</emphasis>
 
objects. The label at the top of each 

<emphasis id="strong1025" effect="bold">
Canvas

</emphasis>
 object tells which types of objects 
can be dropped into that particular 

<emphasis id="strong1026" effect="bold">
Canvas

</emphasis>
 object.

</para>





<para id="p1027">
<emphasis id="strong1027" effect="bold">
Protection on the left and top

</emphasis>
</para>





<para id="p1028">
An object may not be dropped in such a way that it protrudes outside the left 
edge or the top of a 

<emphasis id="strong1028" effect="bold">
Canvas

</emphasis>
 object. If an attempt is made to do so when an 
object is being dragged to a new location within the same 

<emphasis id="strong1029" effect="bold">
Canvas

</emphasis>
 object, it 
simply returns to its original position.

</para>





<para id="p1029">
If this happens when the object is being dragged into a different 

<emphasis id="strong1030" effect="bold">
Canvas

</emphasis>
 
object, it assumes the same relative position in the new Canvas object that it 
previously occupied in the 

<emphasis id="strong1031" effect="bold">
Canvas

</emphasis>
 object from which it was dragged.

</para>





<para id="p1030">
<emphasis id="strong1032" effect="bold">
Scrollbars magically appear

</emphasis>
</para>





<para id="p1031">
If the object is dropped such that it protrudes outside the right side or the 
bottom of the 

<emphasis id="strong1033" effect="bold">
Canvas

</emphasis>
 object, scroll bars automatically appear on the 


<emphasis id="strong1034" effect="bold">
Canvas

</emphasis>
 
object.

</para>




<para id="p1032">
<emphasis id="strong1035" effect="bold">
Allowable object types in the different Canvas objects

</emphasis>
</para>





<para id="p1033">
The following list shows the 
types of draggable objects that can be dropped into each of the Canvas objects:

</para>




<list id="ul1012" list-type="bulleted">

	

<item id="li1047">

	Top canvas: images and 
	buttons only.
	

</item>


	

<item id="li1048">

	Middle canvas: buttons 
	and text areas only.
	

</item>


	

<item id="li1049">

	Bottom canvas: text areas 
	and images only.
	

</item>




</list>




<para id="p1034">
<emphasis id="strong1036" effect="bold">
Results of dragging objects

</emphasis>
</para>




<para id="p1035">
Figure 3 shows the results of 
dragging the button into the top 

<emphasis id="strong1037" effect="bold">
Canvas

</emphasis>
 object and dragging an image into the 
bottom 

<emphasis id="strong1038" effect="bold">
Canvas

</emphasis>
 object. You cannot drop the 

<emphasis id="strong1039" effect="bold">
TextArea

</emphasis>
 object into the top canvas, 
an image into the middle canvas, or the button into the bottom canvas.

</para>





<figure id="figure1002" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_3" effect="bold">
</emphasis>
Results of dragging objects.
</title>





<media id="media1002" alt="Missing Image" display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/as0142b.jpg" width="218" height="773"/>
</media>




<caption>Results of dragging objects.</caption>
</figure>







<para id="p1036">
Figure 4 shows the result of 
dropping the 

<emphasis id="strong1040" effect="bold">
TextArea

</emphasis>
 object into the middle 

<emphasis id="strong1041" effect="bold">
Canvas

</emphasis>
 object.

</para>





<figure id="figure1003" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_4" effect="bold">
</emphasis>
Result of droping the TextArea into the middle  	Canvas.
</title>





<media id="media1003" alt="Missing image" display="block">
<image id="img1003" mime-type="image/jpeg" src="../../media/as0142c.jpg" width="218" height="773"/>
</media>




<caption>Result of droping the TextArea into the middle  	Canvas.</caption>
</figure>









</section>
<section id="h11004">
<title>
<emphasis id="DiscussionandSamplePrograms" effect="bold">


</emphasis>

Discussion and sample code

</title>







<para id="p1037">
<emphasis id="strong1042" effect="bold">
Will explain in fragments

</emphasis>
</para>





<para id="p1038">
I will explain the code for 
this program in fragments. Complete listings of the MXML code and the 
ActionScript code are provided in Listing 13 and Listing 14 near the end of the 
lesson.

</para>





<section id="h21003">
<title>
<emphasis id="MXML" effect="bold">

The MXML code

</emphasis>


</title>





<para id="p1039">
The MXML code is shown in 
Listing 1 and also in Listing 13 for your convenience.

</para>





<example id="listing1000" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_1" effect="bold">
</emphasis>
The MXML  	  code.
</title>





    


      


        

<code id="pre1000" display="block">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!--DragAndDrop04
--&gt;

&lt;mx:Application 
  xmlns:mx="http://www.adobe.com/2006/mxml" 
  xmlns:cc="CustomClasses.*"&gt;
  &lt;cc:Driver/&gt;

&lt;/mx:Application&gt;</code>


      

</example>

    


  










<para id="p1040">
As is often the case in this 
series of tutorial lessons, the MXML file is very simple because the program was 
coded almost entirely in ActionScript. The MXML code simply instantiates an 
object of the 

<emphasis id="strong1043" effect="bold">
Driver

</emphasis>
 class. From that point forward, the behavior of the program 
is controlled by ActionScript code.

</para>





</section>
<section id="h21004">
<title>



<emphasis id="The_ActionScript_code" effect="bold">

The 
ActionScript code

</emphasis>


</title>





<para id="p1041">
<emphasis id="strong1044" effect="bold">
The beginning of the Driver class

</emphasis>
</para>





<para id="p1042">
The 

<emphasis id="strong1045" effect="bold">
Driver

</emphasis>
 class begins in 
Listing 2.

</para>





<example id="listing1001" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_2" effect="bold">
</emphasis>
Beginning of the Driver class.
</title>






    


      


        

<code id="pre1001" display="block">package CustomClasses{
  import flash.events.MouseEvent;
  import flash.utils.getQualifiedClassName;
  
  import mx.containers.Canvas;
  import mx.containers.VBox;
  import mx.controls.Button;
  import mx.controls.Image;
  import mx.controls.Label;
  import mx.controls.TextArea;
  import mx.core.DragSource;
  import mx.core.UIComponent;
  import mx.events.DragEvent;
  import mx.events.FlexEvent;
  import mx.managers.DragManager;

  //====================================================//
  
  public class Driver extends VBox {
    private var button:Button = new Button();
    private var butterfly:Image = new Image();
    private var frog:Image = new Image();
    private var textArea:TextArea = new TextArea();
    private var canvasA:Canvas = new Canvas();
    private var canvasB:Canvas = new Canvas();
    private var canvasC:Canvas = new Canvas();
    private var labelA:Label = new Label();
    private var labelB:Label = new Label();
    private var labelC:Label = new Label();
    private var localX:Number;
    private var localY:Number;
    
    public function Driver(){//constructor

      //Put a label at the top of each Canvas object.
      labelA.text = "Images and buttons only";
      labelB.text = "Buttons and text areas only.";
      labelC.text = "Text areas and imges only";
      canvasA.addChild(labelA);
      canvasB.addChild(labelB);
      canvasC.addChild(labelC);
      
      //Add the Canvas objects to the VBox object
      addChild(canvasA);
      addChild(canvasB);
      addChild(canvasC);

      //Embed the image files in the SWF file.
      [Embed("butterfly.jpg")]
      var butterflyA:Class;
      
      [Embed("frog.jpg")]
      var frogA:Class;
      
      //Load the images from the embedded image files
      // into the Image objects.
      butterfly.load(butterflyA);
      frog.load(frogA);
      
      //Put some text on the button and in the TextArea.
      button.label = "button";
      textArea.text = "textArea";
      
      //Add the components to the Canvas objects.
      canvasA.addChild(butterfly);
      canvasA.addChild(frog);
      canvasB.addChild(button);
      canvasC.addChild(textArea);

      //Register an event handler that will be executed
      // whcn the canvas and its children are fully 
      // constructed.
      this.addEventListener(FlexEvent.CREATION_COMPLETE,
                                        completeHandler);
    } //end constructor</code>


      

</example>

    


  










<para id="p1043">
<emphasis id="strong1046" effect="bold">
Nothing new here

</emphasis>
</para>





<para id="p1044">
There is nothing new in 
Listing 2 that you haven't learned about in previous lessons.

</para>





<para id="p1045">
<emphasis id="strong1047" effect="bold">
A creationComplete event handler

</emphasis>
</para>





<para id="p1046">
The last statement in Listing 2 registers a 

<emphasis id="strong1048" effect="bold">
CREATION_COMPLETE

</emphasis>
 event handler on 
the 

<emphasis id="strong1049" effect="bold">
VBox

</emphasis>
 object. The code in the handler is executed when the 


<emphasis id="strong1050" effect="bold">
VBox

</emphasis>
 object and 
all of its children have been fully created. The event handler 
begins in Listing 3.

</para>





<example id="listing1002" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_3" effect="bold">
</emphasis>
Beginning  	  of the creationComplete event handler.
</title>






    


      


        

<code id="pre1002" display="block">
    private function completeHandler(
                          event:mx.events.FlexEvent):void{
      //Make the Canvas objects visible.
      canvasA.setStyle("backgroundColor",0x00FFFF);
      canvasB.setStyle("backgroundColor",0x00FFFF);
      canvasC.setStyle("backgroundColor",0x00FFFF);
      
      //Set the width and height of the canvas objects
      // based on the dimensions of butterfly.
      canvasA.width = 1.6*butterfly.width;
      canvasA.height = 1.6*butterfly.height;
      canvasB.width = 1.6*butterfly.width;
      canvasB.height = 1.6*butterfly.height;
      canvasC.width = 1.6*butterfly.width;
      canvasC.height = 1.6*butterfly.height;
      
      //Reduce the width of the textArea to less than 
      // its default width.
      textArea.width = butterfly.width;
      
      //Move the images, the button, and the text area
      // below the label
      butterfly.y = labelA.height;
      frog.y = labelA.height + butterfly.height;
      button.y = labelB.height;
      textArea.y = labelC.height;</code>


      

</example>

    


  










<para id="p1047">
<emphasis id="strong1051" effect="bold">
Straightforward code

</emphasis>
</para>





<para id="p1048">
The code in Listing 3 is straightforward and you shouldn't have any 
difficulty understanding it based on what you have learned in previous lessons.

</para>





<para id="p1049">
<emphasis id="strong1052" effect="bold">
Register a mouseDown event listener on each 
draggable object

</emphasis>
</para>





<para id="p1050">
Listing 4 registers the same


<emphasis id="strong1053" effect="bold">
MOUSE_DOWN

</emphasis>
 event listener on each draggable object. This is the 
beginning of the process that causes the two 

<emphasis id="strong1054" effect="bold">
Image

</emphasis>
 objects, the 


<emphasis id="strong1055" effect="bold">
Button

</emphasis>
 object, 
and the 

<emphasis id="strong1056" effect="bold">
TextArea

</emphasis>
 object to be draggable.

</para>





<example id="listing1003" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_4" effect="bold">
</emphasis>
Register  	  a mouseDown event listener on each draggable object.
</title>






    


      


        

<code id="pre1003" display="block">      butterfly.addEventListener(MouseEvent.MOUSE_DOWN,
                                        mouseDownHandler);
      frog.addEventListener(MouseEvent.MOUSE_DOWN,
                                        mouseDownHandler);
      button.addEventListener(MouseEvent.MOUSE_DOWN,
                                        mouseDownHandler);
      textArea.addEventListener(MouseEvent.MOUSE_DOWN,
                                        mouseDownHandler);</code>


      

</example>

    


  










<para id="p1051">
There is nothing new or unique about the registration code in Listing 4. You 
have seen code like that in almost every lesson. The material that is unique to 
the drag and drop process is the code in the 

<emphasis id="strong1057" effect="bold">
mouseDown

</emphasis>
 event handler method that 
I will discuss next.

</para>





<para id="p1052">
<emphasis id="strong1058" effect="bold">
The beginning of the mouseDown event 
handler

</emphasis>
</para>





<para id="p1053">
I will put the explanation of 
the 

<emphasis id="strong1059" effect="bold">
creationComplete

</emphasis>
 event handler on hold while I explain the 


<emphasis id="strong1060" effect="bold">
mouseDown

</emphasis>
 event 
handler. I will return to the 

<emphasis id="strong1061" effect="bold">
creationComplete

</emphasis>
 event handler later.

</para>





<para id="p1054">
The 

<emphasis id="strong1062" effect="bold">
mouseDown

</emphasis>
 event handler that is registered on the four draggable objects 
begins in Listing 5. This method is executed whenever any one of those objects 
dispatches a 

<emphasis id="strong1063" effect="bold">
mouseDown

</emphasis>
 event, and that is the beginning of the drag and drop 
process.

</para>





<example id="listing1004" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_5" effect="bold">
</emphasis>
The  	  beginning of the mouseDown event handler.
</title>






    


      


        

<code id="pre1004" display="block">
    private function mouseDownHandler(
                                   event:MouseEvent):void{
      this.localX = event.localX;
      this.localY = event.localY;
        </code>


      

</example>

    


  










<para id="p1055">
Listing 5 begins by getting 
and saving the coordinates of the mouse pointer, relative to the upper-left 
corner of the object that dispatches the 

<emphasis id="strong1064" effect="bold">
mouseDown

</emphasis>
 event. As 
you saw in the earlier lesson titled 

<emphasis id="strong1065" effect="bold">
Drag and Drop Basics

</emphasis>
, this information will 
be used later to properly position the dropped image in the 

<emphasis id="strong1066" effect="bold">
Canvas

</emphasis>
 object.

</para>





<para id="p1056">
<emphasis id="strong1067" effect="bold">
Get the name of the class from which the 
drag initiator was instantiated

</emphasis>
</para>





<para id="p1057">
The code in Listing 6 is completely new to this lesson.

</para>





<example id="listing1005" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_6" effect="bold">
</emphasis>
Get the  	  name of the class from which the drag initiator was instantiated.
</title>






    


      


        

<code id="pre1005" display="block">      var className:String = getQualifiedClassName(
                                            event.target);</code>


      

</example>

    


  










<para id="p1058">
The Adobe documentation refers to the object that dispatches the


<emphasis id="strong1068" effect="bold">
mouseDown

</emphasis>
 event to start the drag and 
drop process as the 

<emphasis id="strong1069" effect="bold">
drag initiator

</emphasis>
.

</para>





<para id="p1059">
<emphasis id="strong1070" effect="bold">
Call the standalone getQualifiedClassName function

</emphasis>
</para>





<para id="p1060">
Listing 6 calls the function named 

<emphasis id="strong1071" effect="bold">
getQualifiedClassName

</emphasis>
 to 
get a string containing the name of the class from which the drag initiator 
object was instantiated. Note that this is a stand-alone function in the


<emphasis id="strong1072" effect="bold">
flash.utils

</emphasis>
 package.

</para>




<para id="p1061">
<emphasis id="strong1073" effect="bold">
Non-unique strings

</emphasis>
</para>





<para id="p1062">
Different classes return different strings but the strings are not unique. In 
other words, two or more classes may return the same string. For example, 
several different Flex components return the same string as the string returned 
by the 

<emphasis id="strong1074" effect="bold">
Button

</emphasis>
 component.

</para>





<para id="p1063">
The three draggable component types used in this program return the following 

<emphasis id="strings" effect="bold">


strings

</emphasis>

:

</para>




<list id="ul1013" list-type="bulleted">

  

<item id="li1050">
<emphasis id="strong1075" effect="bold">
Image

</emphasis>
 returns "mx.controls::Image"

</item>


  

<item id="li1051">
<emphasis id="strong1076" effect="bold">
Button

</emphasis>
 returns "mx.controls::Button"

</item>


  

<item id="li1052">
<emphasis id="strong1077" effect="bold">
TextArea

</emphasis>
 returns "mx.core::UITextField"

</item>




</list>





<para id="p1064">
<emphasis id="strong1078" effect="bold">
Save the string

</emphasis>
</para>




<para id="p1065">
The string returned by the object that dispatched the 

<emphasis id="strong1079" effect="bold">
mouseDown

</emphasis>
 event is 
saved in the variable named 

<emphasis id="strong1080" effect="bold">
className

</emphasis>
 in Listing 6. This string 
value will be used later to identify the type of component that dispatched the 


<emphasis id="strong1081" effect="bold">
mouseDown

</emphasis>
 event.

</para>




<para id="p1066">
<emphasis id="strong1082" effect="bold">
Some of the steps in the process...

</emphasis>
</para>





<para id="p1067">
When the object being dragged enters one of the 

<emphasis id="strong1083" effect="bold">
Canvas

</emphasis>
 objects, the 


<emphasis id="strong1084" effect="bold">
Canvas

</emphasis>
 
object dispatches a 

<emphasis id="strong1085" effect="bold">
dragEnter

</emphasis>
 event, which is a subtype of the class 


<emphasis id="strong1086" effect="bold">
DragEvent

</emphasis>
. 
The 

<emphasis id="strong1087" effect="bold">
dragEnter

</emphasis>
 event handler receives an object of type 

<emphasis id="strong1088" effect="bold">
DragEvent

</emphasis>
, which 
encapsulates an object of the class 

<emphasis id="strong1089" effect="bold">
DragSource

</emphasis>
.

</para>




<para id="p1068">
<emphasis id="strong1090" effect="bold">
The DragSource object

</emphasis>
</para>





<para id="p1069">
The 

<emphasis id="strong1091" effect="bold">
DragSource

</emphasis>
 object encapsulates a reference to the drag initiator object


<emphasis id="em1002" effect="italics">
(the object that dispatched the 

<emphasis id="strong1092" effect="bold">
mouseDown

</emphasis>
 event)

</emphasis>
. 
It also encapsulates a format string that can be used to identify the drag 
initiator object. In this program, that string is used by a particular 

<emphasis id="strong1093" effect="bold">
Canvas

</emphasis>
 
object to determine if it will accept a drop by the drag initiator object.

</para>





<para id="p1070">
<emphasis id="strong1094" effect="bold">
Populate a new DragSource object with the drag 
initiator and a format string

</emphasis>
</para>





<para id="p1071">
Listing 7 instantiates a new 

<emphasis id="strong1095" effect="bold">
DragSource

</emphasis>
 object and populates it with the drag 
initiator and a format string that identifies the type of the drag initiator. 
The format string is based on the class from which the drag initiator was 
instantiated using the information in the 

<emphasis id="strong1096" effect="bold">
className

</emphasis>
 variable from Listing 6 
in the conditional clause.

</para>





<example id="listing1006" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_7" effect="bold">
</emphasis>
Populate  	  a new DragSource object with the drag initiator and a format string.
</title>






    


      


        

<code id="pre1006" display="block">      var dragSource:DragSource = new DragSource();

      if(className == "mx.controls::Image"){
        dragSource.addData(UIComponent(
                         event.currentTarget),"imageObj");
      }else if(className == "mx.controls::Button"){
        dragSource.addData(UIComponent(
                        event.currentTarget),"buttonObj");
      }else if(className == "mx.core::UITextField"){
        dragSource.addData(UIComponent(
                      event.currentTarget),"textAreaObj");
      } //end else if
        </code>


      

</example>

    


  










<para id="p1072">
<emphasis id="strong1097" effect="bold">
Can the drag initiator object be dropped?

</emphasis>
</para>




<para id="p1073">
A 

<emphasis id="strong1098" effect="bold">
Canvas

</emphasis>
 object that examines the format string from the 


<emphasis id="strong1099" effect="bold">
DragSource

</emphasis>
 object 
later in the program will use the format string to determine if it is willing to allow the drag 
initiator object to be dropped on it.

</para>




<para id="p1074">
<emphasis id="strong1100" effect="bold">
Cast the current target to type UIComponent

</emphasis>
</para>





<para id="p1075">
The term 

<emphasis id="strong1101" effect="bold">
event.currentTarget

</emphasis>
 is a reference to the object that dispatched the 


<emphasis id="strong1102" effect="bold">
mouseDown

</emphasis>
 event, which is the drag initiator. However, when the 


<emphasis id="strong1103" effect="bold">
currentTarget

</emphasis>
 is 
extracted from the 

<emphasis id="strong1104" effect="bold">
MouseEvent

</emphasis>
 object, it is returned as type 


<emphasis id="strong1105" effect="bold">
Object

</emphasis>
. In order 
for it to be suitable for use as the drag initiator, it must be cast to type


<emphasis id="strong1106" effect="bold">
UIComponent

</emphasis>
.

</para>




<para id="p1076">
<emphasis id="strong1107" effect="bold">
Relationships among the strings

</emphasis>
</para>





<para id="p1077">
I could have simply used the strings from the above 

<link id="a1036" target-id="strings">

list

</link>

 as the format strings, but I decided to create new 
strings to show that they are really independent of one another.

</para>





<para id="p1078">
The relationships that I created between the strings in the above 

<link id="a1037" target-id="strings">

list

</link>

 and 
the format strings is shown below:

</para>




<list id="ul1014" list-type="bulleted">

  

<item id="li1053">
<emphasis id="strong1108" effect="bold">
Image

</emphasis>
 returns "mx.controls::Image" -- "imageObj"

</item>


  

<item id="li1054">
<emphasis id="strong1109" effect="bold">
Button

</emphasis>
 returns "mx.controls::Button" -- "buttonObj"

</item>


  

<item id="li1055">
<emphasis id="strong1110" effect="bold">
TextArea

</emphasis>
 returns "mx.core::UITextField" -- "textAreaObj"

</item>




</list>





<para id="p1079">
<emphasis id="strong1111" effect="bold">
Initiate the drag and drop operation

</emphasis>
</para>





<para id="p1080">
Listing 8 calls the static 
method named 

<emphasis id="strong1112" effect="bold">
doDrag

</emphasis>
 of the 

<emphasis id="strong1113" effect="bold">
DragManager

</emphasis>
 class to initiate the drag and drop 
operation.

</para>





<example id="listing1007" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_8" effect="bold">
</emphasis>
Initiate  	  the drag and drop operation.
</title>






    


      


        

<code id="pre1007" display="block">      DragManager.doDrag(UIComponent(event.currentTarget),
                                        dragSource,event);
    }//end mouseDownHandler</code>


      

</example>

    


  










<para id="p1081">
I explained the use of this method in the previous lesson titled 

<emphasis id="strong1114" effect="bold">
Drag and Drop Basics


</emphasis>
so I will refer you back to that lesson for a detailed explanation.

</para>





<para id="p1082">
<emphasis id="strong1115" effect="bold">
Register a different dragEnter event handler on each 
Canvas object

</emphasis>
</para>





<para id="p1083">
Returning to the discussion of the 

<emphasis id="strong1116" effect="bold">
creationComplete

</emphasis>
 event 
handler, Listing 9 registers a different 

<emphasis id="strong1117" effect="bold">
dragEnter

</emphasis>
 event 
handler on each 

<emphasis id="strong1118" effect="bold">
Canvas

</emphasis>
 object.

</para>





<example id="listing1008" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_9" effect="bold">
</emphasis>
Register a  	  different dragEnter event handler on each Canvas object.
</title>






    


      


        

<code id="pre1008" display="block">      //Register a different dragEnter event handler on
      // each Canvas object to make it possible for each
      // Canvas object to accept only two of the three
      // types of components for dropping.
      canvasA.addEventListener(DragEvent.DRAG_ENTER,
                                           enterHandlerA);
      canvasB.addEventListener(DragEvent.DRAG_ENTER,
                                           enterHandlerB);
      canvasC.addEventListener(DragEvent.DRAG_ENTER,
                                           enterHandlerC);
</code>


      

</example>

    


  








	

<para id="p1084">
<emphasis id="strong1119" effect="bold">
Dispatching dragEnter events

</emphasis>
</para>


	

<para id="p1085">
As you learned in the earlier lesson titled

<emphasis id="strong1120" effect="bold">
 Drag and Drop Basics

</emphasis>
, 
	when

<emphasis id="strong1121" effect="bold">
 

</emphasis>
the user moves the drag proxy over another component, 
	that component dispatches a 

<emphasis id="strong1122" effect="bold">
dragEnter 

</emphasis>
event.

</para>


	

<para id="p1086">
If a 

<emphasis id="strong1123" effect="bold">
dragEnter 

</emphasis>
event handler has been registered on that 
	component, the handler method is executed. If the code in the event handler 
	

<emphasis id="accepts" effect="bold">

accepts

</emphasis>

 the drag, it becomes the drop target and receives 

<emphasis id="strong1124" effect="bold">
dragOver

</emphasis>
,
	

<emphasis id="strong1125" effect="bold">
dragExit

</emphasis>
, and 

<emphasis id="strong1126" effect="bold">
dragDrop 

</emphasis>
events.

</para>




<para id="p1087">
I will explain the code in the 

<emphasis id="strong1127" effect="bold">
dragEnter

</emphasis>
 event handlers 
later. Right now, let's look at the remainder of the 

<emphasis id="strong1128" effect="bold">
creationComplete

</emphasis>
 
event handler.

</para>




<para id="p1088">
<emphasis id="strong1129" effect="bold">
Register the same dragDrop event handler on all three 
Canvas objects

</emphasis>
</para>





<para id="p1089">
Listing 10 registers the same


<emphasis id="strong1130" effect="bold">
dragDrop

</emphasis>
 event handler on each of the three 

<emphasis id="strong1131" effect="bold">
Canvas

</emphasis>
 
objects

</para>





<example id="listing1009" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_10" effect="bold">
</emphasis>
Register  	  the same dragDrop event handler on all three Canvas objects.
</title>






    


      


        

<code id="pre1009" display="block">      //Register the same dragDrop event handler on all
      // three Canvas objects.
      canvasA.addEventListener(DragEvent.DRAG_DROP,
                                             dropHandler);
      canvasB.addEventListener(DragEvent.DRAG_DROP,
                                             dropHandler);
      canvasC.addEventListener(DragEvent.DRAG_DROP,
                                             dropHandler);

    } //end completeHandler
</code>


      

</example>

    


  










<para id="p1090">
The code in Listing 10 will 
cause another event handler to be called on a 

<emphasis id="strong1132" effect="bold">
Canvas

</emphasis>
 object 
after it dispatches a 

<emphasis id="strong1133" effect="bold">
dragEnter

</emphasis>
 event and 

<link id="a1038" target-id="accepts">


accepts

</link>

 the drag.

</para>




<para id="p1091">
Listing 10 also signals the 
end of the 

<emphasis id="strong1134" effect="bold">
creationComplete

</emphasis>
 event handler.

</para>




<para id="p1092">
<emphasis id="strong1135" effect="bold">
The 
dragEnter event handlers

</emphasis>
</para>




<para id="p1093">
A different 

<emphasis id="strong1136" effect="bold">
dragEnter

</emphasis>
 event handler was registered on each


<emphasis id="strong1137" effect="bold">
Canvas

</emphasis>
 object in Listing 9.

</para>




<para id="p1094">
    Each of the 

<emphasis id="strong1138" effect="bold">
dragEnter

</emphasis>
 event handlers is
    executed when the dragged component enters the
    

<emphasis id="strong1139" effect="bold">
Canvas

</emphasis>
 object on which the handler is registered.
    The event handlers decide whether or not to accept
    a drop on the basis of the format string associated
    with the type of object being dragged. Note that
    each 

<emphasis id="strong1140" effect="bold">
Canvas

</emphasis>
 object will accept two of the three
    types of objects.


</para>




<para id="p1095">
<emphasis id="strong1141" effect="bold">
Will only explain one of the dragEnter event handlers

</emphasis>
</para>




<para id="p1096">
Because of the similarity of the three event handlers, I will explain 
only one of them. You can view the code for all three in Listing 14 near the end 
of the lesson. Listing 11 shows a 

<emphasis id="strong1142" effect="bold">
dragEnter

</emphasis>
 event handler for 
the top 

<emphasis id="strong1143" effect="bold">
Canvas

</emphasis>
 object shown in Figure 1.

</para>





<example id="listing1010" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_11" effect="bold">
</emphasis>
A dragEnter event handler for the top  	  Canvas object.
</title>






    


      


        

<code id="pre1010" display="block">    //This dragEnter event handler causes the canvas to
    // accept images and buttons.
    private function enterHandlerA(event:DragEvent):void{
      if ((event.dragSource.hasFormat("imageObj")) || 
               (event.dragSource.hasFormat("buttonObj"))){
        
          DragManager.acceptDragDrop(
                             Canvas(event.currentTarget));
      } //end if
    } //end enterHandler
</code>


      

</example>

    


  








	

<para id="p1097">
<emphasis id="strong1144" effect="bold">

	Confirm the correct format string

</emphasis>
</para>


	

<para id="p1098">
The event handler shown 
	in Listing 11 causes the 

<emphasis id="strong1145" effect="bold">
Canvas

</emphasis>
 object to accept only 
	images and buttons. The only difference between the code in Listing 11 and 
	similar code in the earlier lesson titled 

<emphasis id="strong1146" effect="bold">
Drag and Drop Basics

</emphasis>
 
	is the use of the logical-or (||) operator in Listing 11 to accept either of 
	the two string instead of just one.

</para>


	

<para id="p1099">
The code in Listing 11 checks to confirm that the format string in the
	

<emphasis id="strong1147" effect="bold">
DragSource

</emphasis>
 object matches either "imageObj" or "buttonObj"
	

<emphasis id="em1003" effect="italics">
(see Listing 7)

</emphasis>
. If so, it calls the static 

<emphasis id="strong1148" effect="bold">
acceptDragDrop 

</emphasis>
method on the 

<emphasis id="strong1149" effect="bold">

DragManager 

</emphasis>
class, passing a reference to itself as a parameter in the 
method call.

</para>




<para id="p1100">
<emphasis id="strong1150" effect="bold">
Accept the dragged object

</emphasis>
</para>




<para id="p1101">
The call to the 

<emphasis id="strong1151" effect="bold">
acceptDragDrop

</emphasis>
 method notifies the 

<emphasis id="strong1152" effect="bold">

DragManager 

</emphasis>
that the 

<emphasis id="strong1153" effect="bold">
Canvas

</emphasis>
 object is willing to 
accept the contents of the 

<emphasis id="strong1154" effect="bold">
DragSource

</emphasis>
  object being dropped onto 
itself.

</para>




<para id="p1102">
<emphasis id="strong1155" effect="bold">
The dragDrop event 
handler

</emphasis>
</para>




<para id="p1103">
The 

<emphasis id="strong1156" effect="bold">
dragDrop


</emphasis>
event handler was registered on all three 

<emphasis id="strong1157" effect="bold">
Canvas

</emphasis>
 
objects in Listing 10. This method is executed after a 

<emphasis id="strong1158" effect="bold">
Canvas

</emphasis>
 object 
accepts the drag and the user releases the mouse button while the drag proxy is 
over the 

<emphasis id="strong1159" effect="bold">
Canvas

</emphasis>
.

</para>




<para id="p1104">
The 

<emphasis id="strong1160" effect="bold">
dragDrop

</emphasis>
 
event handler method is shown in its entirety in Listing 12.

</para>





<example id="listing1011" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_12" effect="bold">
</emphasis>
The dragDrop event  	  handler.
</title>






    


      


        

<code id="pre1011" display="block">    //Execute the dragDrop event handler to drop the
    // object in its new location. Compensate for the
    // fact that the mouse pointer is not at the
    // upper-left corner of the object when the drag is
    // initiated. Don't allow the image to be dragged off
    // the left side of the canvas or off the top of the
    // canvas. See more information about this in the
    // comments at the top.
    private function dropHandler(event:DragEvent):void{

      //Add the drag initiator to the new container. 
      // Note that it is not necessary to first remove it
      // from its old container.
      //Also note that the z-axis index is lost in this
      // operation. When an object is dropped on top of
      // another object in the new container, it stays on
      // top regardless of the original z-order of the
      // two objects.
      //The original z-order has no meaning when you drag
      // objects into a canvas from several othr Canvas
      //
      event.currentTarget.addChild(event.dragInitiator);

      //Position the dragInitiator in the Canvas object
      // based on the mouse coordinates at the drop and
      // the mouse coordinates relative to the upper-
      // left corner of the drag initiator at the 
      // start of the drag.
      //Compute the correct position for the upper-left
      // corner of the dropped object.
      //If you attempt to drop an object so that it
      // protrudes out of the left side or the top of 
      // the canvas, the drag and drop operation is
      // simply aborted.
      var cornerX:Number = (Canvas(event.currentTarget).
                                         mouseX) - localX;
      var cornerY:Number = (Canvas(event.currentTarget).
                                         mouseY) - localY;
      if((cornerX &gt; 0.0) &amp;&amp; (cornerY &gt; 0.0)){
        event.dragInitiator.x = cornerX;
        event.dragInitiator.y = cornerY
      } //end if
    } //end dropHandler
    //--------------------------------------------------//
      
  } //end class
} //end package
</code>


      

</example>

    


  










<para id="p1105">
<emphasis id="strong1161" effect="bold">
The new code

</emphasis>
</para>





<para id="p1106">
The only real difference between the code in Listing 12 and the similar event 
handler in the earlier lesson titled 

<emphasis id="strong1162" effect="bold">
Drag and Drop Basics

</emphasis>
 is 
the first statement in Listing 12 that adds the dragged object as a child of the


<emphasis id="strong1163" effect="bold">
Canvas

</emphasis>
 object.

</para>




<para id="p1107">
What you learned in the earlier lesson in conjunction with the comments in 
Listing 12 should suffice and no further explanation of this method should be 
necessary.

</para>




<para id="p1108">
<emphasis id="strong1164" effect="bold">
The end of the program

</emphasis>
</para>




<para id="p1109">
Listing 12 also signals the end of the 

<emphasis id="strong1165" effect="bold">
Driver

</emphasis>
 class, the end 
of the package, and the end of the program.

</para>







</section>
</section>
<section id="h11005">
<title>
<emphasis id="Runtheprogram" effect="bold">


</emphasis>

Run the program

</title>







<para id="p1110">
I encourage you to 

<link id="a1039" target-id="Click">

run

</link>

 this program from the web. Then copy the code from 
Listing 13 and Listing 14. Use that code to create a Flex project. 
Compile and run the project. Experiment with the code, making changes, and 
observing the results of your changes. Make certain that you can explain 
why your changes behave as they do.

</para>





</section>
<section id="h11006">
<title>
<emphasis id="Resources" effect="bold">

Resources

</emphasis>


</title>





<para id="p1111">
I will publish a list containing links to ActionScript 
resources as a separate document. Search for ActionScript 
Resources in the Connexions search box.

</para>







</section>
<section id="h11007">
<title>
<emphasis id="CompleteProgramListings" effect="bold">


</emphasis>

Complete program listings

</title>






<para id="p1112">
Complete listings of the MXML code and the ActionScript code are provided below.

</para>





<example id="listing1012" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_13" effect="bold">
</emphasis>
The MXML code for the program named  	  DragAndDrop04.
</title>






    


      


        

<code id="pre1012" display="block">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!--DragAndDrop04
--&gt;

&lt;mx:Application 
  xmlns:mx="http://www.adobe.com/2006/mxml" 
  xmlns:cc="CustomClasses.*"&gt;
  &lt;cc:Driver/&gt;

&lt;/mx:Application&gt;</code>


      

</example>

    


  










<para id="p1113">
</para>






<example id="listing1013" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_14" effect="bold">
</emphasis>
The ActionScript code for the program named  	  DragAndDrop04.
</title>






    


      


        

<code id="pre1013" display="block">/*DragAndDrop04

Illustrates how to drag components from one container
to another while giving the receiving container the
ability to accept or reject the drop on the basis of the
type of object being dragged.

Places three Canvas objects in a VBox object.

Places two images in one of the Canvas objects:
butterfly.jpg
frog.jpg

Places a Button object in a second Canvas object.

Places a TextArea object in the third Canvas object.

All four of above objects are draggable.

Places a label at the top of each Canvas object, but the
labels are not draggable.

Any of the four draggable objects can be dragged and
dropped anywhere within two of the three Canvas objects
so long as the mouse pointer is inside the Canvas object.

None of the objects can be dropped in all three of the
Canvas objects.

If an object is dropped so that it protrudes outside the
left edge or the top of the Canvas object when being 
dragged to a new location within the same Canvas object, 
it simply returns to its original position. If this
happens when the object is being dragged into a different
Canvas object, it assumes the same relative position in
the new Canvas object that it previously occupied in the
Canvas object from which it was dragged.

If the dragged object is dropped such that it protrudes
outside the right side or the bottom of the Canvas
object, scroll bars automatically appear on the Canvas
object.

The size of the canvas is based on the size of the
butterfly image so that other images can be substituted 
for my images when the program is recompiled so long as 
the file names and paths are correct.
*********************************************************/
package CustomClasses{
  import flash.events.MouseEvent;
  import flash.utils.getQualifiedClassName;
  
  import mx.containers.Canvas;
  import mx.containers.VBox;
  import mx.controls.Button;
  import mx.controls.Image;
  import mx.controls.Label;
  import mx.controls.TextArea;
  import mx.core.DragSource;
  import mx.core.UIComponent;
  import mx.events.DragEvent;
  import mx.events.FlexEvent;
  import mx.managers.DragManager;

  //====================================================//
  
  public class Driver extends VBox {
    private var button:Button = new Button();
    private var butterfly:Image = new Image();
    private var frog:Image = new Image();
    private var textArea:TextArea = new TextArea();
    private var canvasA:Canvas = new Canvas();
    private var canvasB:Canvas = new Canvas();
    private var canvasC:Canvas = new Canvas();
    private var labelA:Label = new Label();
    private var labelB:Label = new Label();
    private var labelC:Label = new Label();
    private var localX:Number;
    private var localY:Number;
    
    public function Driver(){//constructor

      //Put a label at the top of each Canvas object.
      labelA.text = "Images and buttons only";
      labelB.text = "Buttons and text areas only.";
      labelC.text = "Text areas and imges only";
      canvasA.addChild(labelA);
      canvasB.addChild(labelB);
      canvasC.addChild(labelC);
      
      //Add the Canvas objects to the VBox object
      addChild(canvasA);
      addChild(canvasB);
      addChild(canvasC);

      //Embed the image files in the SWF file.
      [Embed("butterfly.jpg")]
      var butterflyA:Class;
      
      [Embed("frog.jpg")]
      var frogA:Class;
      
      //Load the images from the embedded image files
      // into the Image objects.
      butterfly.load(butterflyA);
      frog.load(frogA);
      
      //Put some text on the button and in the text area.
      button.label = "button";
      textArea.text = "textArea";
      
      //Add the components to the Canvas objects.
      canvasA.addChild(butterfly);
      canvasA.addChild(frog);
      canvasB.addChild(button);
      canvasC.addChild(textArea);

      //Register an event handler that will be executed
      // whcn the canvas and its children are fully 
      // constructed.
      this.addEventListener(FlexEvent.CREATION_COMPLETE,
                                         completeHandler);
    } //end constructor
    //--------------------------------------------------//

    //This handler method is executed when the Canvas and
    // its children have been fully created.
    private function completeHandler(
                          event:mx.events.FlexEvent):void{
      //Make the Canvas objects visible.
      canvasA.setStyle("backgroundColor",0x00FFFF);
      canvasB.setStyle("backgroundColor",0x00FFFF);
      canvasC.setStyle("backgroundColor",0x00FFFF);
      
      //Set the width and height of the canvas objects
      // based on the dimensions of butterfly.
      canvasA.width = 1.6*butterfly.width;
      canvasA.height = 1.6*butterfly.height;
      canvasB.width = 1.6*butterfly.width;
      canvasB.height = 1.6*butterfly.height;
      canvasC.width = 1.6*butterfly.width;
      canvasC.height = 1.6*butterfly.height;
      
      //Reduce the width of the textArea to less than 
      // its default width.
      textArea.width = butterfly.width;
      
      //Move the images, the button, and the text area
      // below the label
      butterfly.y = labelA.height;
      frog.y = labelA.height + butterfly.height;
      button.y = labelB.height;
      textArea.y = labelC.height;
      
      //Register event listeners to support drag and drop 
      // operations on both images, the button, and the
      // text area with the canvas as the drag target.
      butterfly.addEventListener(MouseEvent.MOUSE_DOWN,
                                        mouseDownHandler);
      frog.addEventListener(MouseEvent.MOUSE_DOWN,
                                        mouseDownHandler);
      button.addEventListener(MouseEvent.MOUSE_DOWN,
                                        mouseDownHandler);
      textArea.addEventListener(MouseEvent.MOUSE_DOWN,
                                        mouseDownHandler);

      //Register a different dragEnter event handler on
      // each Canvas object to make it possible for each
      // Canvas object to accept only two of the three
      // types of components for dropping.
      canvasA.addEventListener(DragEvent.DRAG_ENTER,
                                           enterHandlerA);
      canvasB.addEventListener(DragEvent.DRAG_ENTER,
                                           enterHandlerB);
      canvasC.addEventListener(DragEvent.DRAG_ENTER,
                                           enterHandlerC);

      //Register the same dragDrop event handler on all
      // three Canvas objects.
      canvasA.addEventListener(DragEvent.DRAG_DROP,
                                             dropHandler);
      canvasB.addEventListener(DragEvent.DRAG_DROP,
                                             dropHandler);
      canvasC.addEventListener(DragEvent.DRAG_DROP,
                                             dropHandler);

    } //end completeHandler
    //--------------------------------------------------//
    
    // This event handler initiates the drag-and-drop \
    // operation for the image that dispatches the 
    // mouseDown event.
    private function mouseDownHandler(
                                   event:MouseEvent):void{

      //Save the location of the mouse within the object
      // being dragged. This information will be used
      // later to properly position the dropped image in
      // the drop target.
      this.localX = event.localX;
      this.localY = event.localY;

      //The drag initiator is the object that dispatched
      // this mouseDown event. Get a string containing
      // the name of the class from which that object was
      // instantiated. For the components used in this 
      // program, the possible strings are:
      // Image - "mx.controls::Image"
      // Button - "mx.controls::Button"
      // TextAra - "mx.core::UITextField"
      //Note, the following function is in the
      // flash.utils package.
      var className:String = getQualifiedClassName(
                                            event.target);

      //Populate a new DragSource object with the drag
      // initiator and a format string based on the class
      // from which the drag initiator was instantiated.
      //The format string will be used later to decide
      // if a particular Canvas object is willing to
      // allow a particular type of object to be dropped
      // on it.
      //Note that when the target of the mouseDown event
      // is used as the drag initiator, it must be cast
      // to type UIComponent.
      var dragSource:DragSource = new DragSource();
      if(className == "mx.controls::Image"){
        dragSource.addData(UIComponent(
                         event.currentTarget),"imageObj");
      }else if(className == "mx.controls::Button"){
        dragSource.addData(UIComponent(
                        event.currentTarget),"buttonObj");
      }else if(className == "mx.core::UITextField"){
        dragSource.addData(UIComponent(
                      event.currentTarget),"textAreaObj");
      } //end else if

      //Initiate the drag and drop operation.
      DragManager.doDrag(UIComponent(event.currentTarget),
                                        dragSource,event);
    }//end mouseDownHandler
    //--------------------------------------------------//
    
    //Each of the following dragEnter event handlers is
    // executed when the dragged omponent enters the
    // Canvas object on which the handlr is registered.
    // The event handlers decide whether or not to accept
    // a drop on the basis ofthe format string associated
    // with the type of object being dragged. Note that
    // each Canvas ovject will accept two of the three
    // types of objects.
    
    //This dragEnter event handler causes the canvas to
    // accept images and buttons.
    private function enterHandlerA(event:DragEvent):void{
      if ((event.dragSource.hasFormat("imageObj")) || 
               (event.dragSource.hasFormat("buttonObj"))){
        
          DragManager.acceptDragDrop(
                             Canvas(event.currentTarget));
      } //end if
    } //end enterHandler
    //--------------------------------------------------//
    
    //This dragEnter event handler causes the canvas to
    // accept textAreas and buttons.
    private function enterHandlerB(event:DragEvent):void{
      if ((event.dragSource.hasFormat("textAreaObj")) || 
               (event.dragSource.hasFormat("buttonObj"))){
                 
          DragManager.acceptDragDrop(
                             Canvas(event.currentTarget));
      } //end if
    } //end enterHandler
    //--------------------------------------------------//
    
    //This dragEnter event handler causes the canvas to
    // textAreas and images.
    private function enterHandlerC(event:DragEvent):void{
      if ((event.dragSource.hasFormat("textAreaObj")) || 
                (event.dragSource.hasFormat("imageObj"))){
                  
          DragManager.acceptDragDrop(
                             Canvas(event.currentTarget));
      } //end if
    } //end enterHandler
    //--------------------------------------------------//
    
    //Execute the dragDrop event handler to drop the
    // object in its new location. Compensate for the
    // fact that the mouse pointer is not at the
    // upper-left corner of the object when the drag is
    // initiated. Don't allow the image to be dragged off
    // the left side of the canvas or off the top of the
    // canvas. See more information about this in the
    // comments at the top.
    private function dropHandler(event:DragEvent):void{

      //Add the drag initiator to the new container. 
      // Note that it is not necessary to first remove it
      // from its old container.
      //Also note that the z-axis index is lost in this
      // operation. When an object is dropped on top of
      // another object in the new container, it stays on
      // top regardless of the original z-order of the
      // two objects.
      //The original z-order has no meaning when you drag
      // objects into a canvas from several othr Canvas
      //
      event.currentTarget.addChild(event.dragInitiator);

      //Position the dragInitiator in the Canvas object
      // based on the mouse coordinates at the drop and
      // the mouse coordinates relative to the upper-
      // left corner of the drag initiator at the 
      // start of the drag.
      //Compute the correct position for the upper-left
      // corner of the dropped object.
      //If you attempt to drop an object so that it
      // protrudes out of the left side or the top of 
      // the canvas, the drag and drop operation is
      // simply aborted.
      var cornerX:Number = (Canvas(event.currentTarget).
                                         mouseX) - localX;
      var cornerY:Number = (Canvas(event.currentTarget).
                                         mouseY) - localY;
      if((cornerX &gt; 0.0) &amp;&amp; (cornerY &gt; 0.0)){
        event.dragInitiator.x = cornerX;
        event.dragInitiator.y = cornerY
      } //end if
    } //end dropHandler
    //--------------------------------------------------//
      
  } //end class
} //end package</code>


      

</example>

    


  










</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>




<note id="note1002" type="miscellaneous">







<emphasis id="strong1166" effect="bold">
Housekeeping material

</emphasis>



<list id="ul1015" list-type="bulleted">



<item id="li1056">
Module name: Dragging Objects between Containers

</item>




<item id="li1057">
Files:

<list id="ul1016" list-type="bulleted">



<item id="li1058">
ActionScript0142\ActionScript0142.htm

</item>




<item id="li1059">
ActionScript0142\Connexions\ActionScriptXhtml0142.htm

</item>




</list>




</item>




</list>




</note>









<note id="note1003" type="miscellaneous">




<emphasis id="strong1167" effect="bold">
PDF disclaimer:

</emphasis>
 Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.


</note>









<para id="p1114">
-end-

</para>






</section>
</content>




</document>