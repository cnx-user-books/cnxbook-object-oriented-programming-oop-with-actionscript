<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Encapsulation - The Big Picture</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m34443</md:content-id>
  <md:title>Encapsulation - The Big Picture</md:title>
  <md:abstract>Learn two different approaches for using ActionScript to create complex custom components having the same programming interface, the same user interface, and the same behavior.</md:abstract>
  <md:uuid>885b6a8f-8160-491d-b376-485fb485c1f9</md:uuid>
</metadata>

<content>

















<note id="note1000" type="miscellaneous">





Click 

<link id="a1000" url="Encapsulation01.html">

Encapsulation01

</link>


to run this ActionScript program. 

<emphasis id="em1000" effect="italics">

(Click the "Back" button in your browser
to return to this page.)

</emphasis>



</note>







<section id="h11000">
<title>
Table of Contents

</title>






<list id="ul1000" list-type="bulleted">

  

<item id="li1000">
<link id="a1001" target-id="Preface">

Preface

</link>

 
    

<list id="ul1001" list-type="bulleted">

      

<item id="li1001">
<link id="a1002" target-id="General">

General

</link>


</item>


      

<item id="li1002">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>

 
        

<list id="ul1002" list-type="bulleted">

          

<item id="li1003">
<link id="a1004" target-id="Figures">

Figures

</link>


</item>


          

<item id="li1004">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>


        

</list>


      

</item>


      

<item id="li1005">
<link id="a1006" target-id="Supplementary_material">

Supplemental material

</link>


</item>


    

</list>


  

</item>


  

<item id="li1006">
<link id="a1007" target-id="GeneralBackgroundInformation">

General background information

</link>


    

<list id="ul1003" list-type="bulleted">

      

<item id="li1007">
<link id="a1008" target-id="Abstraction">

Abstraction

</link>


</item>


      

<item id="li1008">
<link id="a1009" target-id="Encapsulation">

Encapsulation

</link>


</item>


    

</list>


  

</item>


  

<item id="li1009">
<link id="a1010" target-id="Preview">

Preview

</link>


</item>


  

<item id="li1010">
<link id="a1011" target-id="DiscussionandSamplePrograms">

Discussion and sample code

</link>


</item>


  

<item id="li1011">
<link id="a1012" target-id="Runtheprogram">

Run the program

</link>


</item>


  

<item id="li1012">
<link id="a1013" target-id="Resources">

Resources

</link>


</item>


  

<item id="li1013">
<link id="a1014" target-id="Complete_program_listings">

Complete program listings

</link>


</item>


			

<item id="li1014">
<link id="a1015" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>









</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">


</emphasis>

Preface

</title>







<section id="h21000">
<title>
<emphasis id="General" effect="bold">

General

</emphasis>


</title>



        

<note id="note1001" type="miscellaneous">



          


            


              


              Note that all references to ActionScript in this lesson are 
			  references to version 3 or later. 

</note>

            


          



        






<para id="p1000">
This tutorial lesson is part of a series of lessons dedicated to 
object-oriented programming 

<emphasis id="em1001" effect="italics">
(OOP)

</emphasis>
 with ActionScript
.

</para>





<para id="p1001">
<emphasis id="strong1000" effect="bold">
The three main characteristics of an object-oriented 
program

</emphasis>
</para>





<para id="p1002">
Object-oriented programs exhibit three main characteristics:

</para>




<list id="ul1004" list-type="bulleted">

  

<item id="li1015">
Encapsulation

</item>


  

<item id="li1016">
Inheritance

</item>


  

<item id="li1017">
Polymorphism

</item>




</list>





<para id="p1003">
In this and the next two lessons, I will explain and illustrate these three 
characteristics from a big-picture viewpoint. Following that, I will get 
down in the weeds and start explaining in detail how to use ActionScript for 
object-oriented programming 

<emphasis id="em1002" effect="italics">
(OOP)

</emphasis>
.

</para>





<para id="p1004">
<emphasis id="strong1001" effect="bold">
Several ways to create and launch ActionScript 
programs

</emphasis>
</para>





<para id="p1005">
There are several ways to create and launch programs written in the 
ActionScript programming language. Many of the lessons in this series will 
use Adobe Flex as the launch pad for the sample ActionScript programs.

</para>





<para id="p1006">
An earlier lesson titled 

<emphasis id="strong1002" effect="bold">
The Default 
Application Container

</emphasis>
 provided information on how to get started programming 
with Adobe's Flex Builder 3. 

<emphasis id="em1003" effect="italics">
(See 

<link id="a1016" url="http://www.dickbaldwin.com/tocFlex.htm">

Baldwin's Flex programming website

</link>

.)

</emphasis>
 
You should study that lesson before embarking on the lessons in this series.

</para>





<para id="p1007">
<emphasis id="strong1003" effect="bold">
Some understanding of Flex MXML will be required

</emphasis>
</para>





<para id="p1008">
I also recommend that you study all of the lessons on 

<link id="a1017" url="http://www.dickbaldwin.com/tocFlex.htm">

Baldwin's Flex programming website

</link>

 
in parallel with your study of these ActionScript lessons. Eventually you 
will need to understand both ActionScript and Flex and the relationships that 
exist between them in order to become a successful ActionScript programmer. 

</para>





<para id="p1009">
<emphasis id="strong1004" effect="bold">
Will emphasize ActionScript code

</emphasis>
</para>





<para id="p1010">
It is often possible to use either ActionScript code or Flex MXML code to 
achieve the same result. Insofar as this series of lessons is concerned, 
the emphasis will be on ActionScript code even in those cases where Flex MXML 
code may be a suitable alternative.

</para>





</section>
<section id="h21001">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>





<para id="p1011">
I recommend that you open another copy of this document in a separate browser 
window and use the following links to easily find and view the figures and 
listings while you are reading about them.

</para>





<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>




<list id="ul1005" list-type="bulleted">

  

<item id="li1018">
<link id="a1018" target-id="Figure_1">

Figure 1

</link>

. Screen output for Encapsulation01.

</item>


  

<item id="li1019">
<link id="a1019" target-id="Figure_2">

Figure 2

</link>

. File structure for the project named 
  Encapsulation01.

</item>




</list>





</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1006" list-type="bulleted">

  

<item id="li1020">
<link id="a1020" target-id="Listing_1">

Listing 1

</link>

. Mxml code to instantiate two custom 
  component objects.

</item>


  

<item id="li1021">
<link id="a1021" target-id="Listing_2">

Listing 2

</link>

. Beginning of the class named QuizA.

</item>


  

<item id="li1022">
<link id="a1022" target-id="Listing_3">

Listing 3

</link>

. Beginning of the class named QuizB.

</item>


  

<item id="li1023">
<link id="a1023" target-id="Listing_4">

Listing 4

</link>

. Implicit setter methods for QuizA.

</item>


  

<item id="li1024">
<link id="a1024" target-id="Listing_5">

Listing 5

</link>

. Implicit setter methods for QuizB.

</item>


  

<item id="li1025">
<link id="a1025" target-id="Listing_6">

Listing 6

</link>

. Constructor for QuizA.

</item>


  

<item id="li1026">
<link id="a1026" target-id="Listing_7">

Listing 7

</link>

. Constructor for QuizB.

</item>


  

<item id="li1027">
<link id="a1027" target-id="Listing_8">

Listing 8

</link>

. The checkButtonHandler for QuizA.

</item>


  

<item id="li1028">
<link id="a1028" target-id="Listing_9">

Listing 9

</link>

. The checkButtonHandler for QuizB.

</item>


  

<item id="li1029">
<link id="a1029" target-id="Listing_10">

Listing 10

</link>

. The vboxCompleteHandler for QuizA.

</item>


  

<item id="li1030">
<link id="a1030" target-id="Listing_11">

Listing 11

</link>

. The vboxCompleteHandler for QuizB.

</item>


  

<item id="li1031">
<link id="a1031" target-id="Listing_12">

Listing 12

</link>

. Source code for 
  Encapsulation01.mxml. 

</item>


  

<item id="li1032">
<link id="a1032" target-id="Listing_13">

Listing 13

</link>

. Source code for QuizA.as. 

</item>


  

<item id="li1033">
<link id="a1033" target-id="Listing_14">

Listing 14

</link>

. Source code for QuizB.as. 

</item>




</list>





</section>
</section>
<section id="h21002">
<title>
<emphasis id="Supplementary_material" effect="bold">

Supplemental material

</emphasis>


</title>





<para id="p1012">
I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials. You will find a consolidated index at 

<link id="a1034" url="http://www.dickbaldwin.com/toc.htm">

www.DickBaldwin.com

</link>

.

</para>





</section>
</section>
<section id="h11002">
<title>
<emphasis id="GeneralBackgroundInformation" effect="bold">

General background information

</emphasis>


</title>





<para id="p1013">
In addition to the three explicit characteristics of 

<emphasis id="em1004" effect="italics">
encapsulation

</emphasis>
,


<emphasis id="em1005" effect="italics">
inheritance

</emphasis>
, and 

<emphasis id="em1006" effect="italics">
polymorphism

</emphasis>
, an object-oriented program also has 
an implicit characteristic of 

<emphasis id="em1007" effect="italics">
abstraction

</emphasis>
.

</para>





<para id="p1014">
<emphasis id="strong1005" effect="bold">
What is abstraction?

</emphasis>
</para>





<para id="p1015">
Abstraction is the process by which we specify a new data type, often 
referred to an abstract data type or ADT.

</para>





<para id="p1016">
<emphasis id="strong1006" effect="bold">
How does abstraction relate to encapsulation?

</emphasis>
</para>





<para id="p1017">
Encapsulation is the process of gathering an ADT's 

<emphasis id="em1008" effect="italics">
data representation

</emphasis>
 
and 

<emphasis id="em1009" effect="italics">
behavior

</emphasis>
 into one encapsulated entity. In other words, 
encapsulation converts from the abstract to the concrete.

</para>





<para id="p1018">
<emphasis id="strong1007" effect="bold">
Some analogies

</emphasis>
</para>





<para id="p1019">
You might think of this as being similar to converting an idea for an 
invention into a set of blueprints from which it can be built, or converting a 
set of written specifications for a widget into a set of drawings that can be 
used by the machine shop to build the widget. 

</para>





<para id="p1020">
Automotive engineers encapsulated the specifications for the steering 
mechanism of my car into a set of manufacturing drawings. Then 
manufacturing personnel used those drawings to produce an object where they 
exposed the interface 

<emphasis id="em1010" effect="italics">
(steering wheel)

</emphasis>
 and hid the implementation 

<emphasis id="em1011" effect="italics">

(levers, bolts, etc.)

</emphasis>
.

</para>





<para id="p1021">
In all likelihood, the steering mechanism object contains a number of other 
more-specialized embedded objects, each of which has 

<emphasis id="em1012" effect="italics">
state

</emphasis>
 and


<emphasis id="em1013" effect="italics">
behavior

</emphasis>
 and also has 

<emphasis id="em1014" effect="italics">
an interface

</emphasis>
 and 

<emphasis id="em1015" effect="italics">
an implementation

</emphasis>
.

</para>





<para id="p1022">
The interfaces for those embedded objects aren't exposed to me, but they are 
exposed to the other parts of the steering mechanism that use them.

</para>





<section id="h21003">
<title>
<emphasis id="Abstraction" effect="bold">

Abstraction

</emphasis>


</title>





<para id="p1023">
Abstraction is the specification of an abstract data type, which includes a 
specification of the type's 

<emphasis id="em1016" effect="italics">
data representation

</emphasis>
 and its 

<emphasis id="em1017" effect="italics">
behavior

</emphasis>
. 
In particular, 

</para>




<list id="ul1007" list-type="bulleted">

  

<item id="li1034">
What kind of data can be stored in an entity of the new type, and 

</item>


  

<item id="li1035">
What are all the ways that the data can be manipulated?

</item>




</list>





<para id="p1024">
<emphasis id="strong1008" effect="bold">
A new type

</emphasis>
</para>





<para id="p1025">
For our purposes, an abstract data type is a new type 

<emphasis id="em1018" effect="italics">
(not intrinsic to 
the ActionScript language)

</emphasis>
. It is not one of the primitive data types that 
are built into the programming language 

<emphasis id="em1019" effect="italics">
(such as Boolean, int, Number, 
String, and uint)

</emphasis>
. 

</para>





<para id="p1026">
<emphasis id="strong1009" effect="bold">
Already known to the compiler

</emphasis>
</para>





<para id="p1027">
The distinction in the previous paragraph is very important. The data 
representation and behavior of the intrinsic or primitive types is already known 
to the compiler and cannot normally be modified by the programmer.

</para>





<para id="p1028">
<emphasis id="strong1010" effect="bold">
Not known to the compiler

</emphasis>
 

</para>





<para id="p1029">
The representation and behavior of an abstract type is not known to the 
compiler until it is defined by the programmer and presented to the compiler in 
an appropriate manner.

</para>





<para id="p1030">
<emphasis id="strong1011" effect="bold">
Define data representation and behavior in a class

</emphasis>
</para>





<para id="p1031">
ActionScript 
 programmers define the 

<emphasis id="em1020" effect="italics">
data representation

</emphasis>
 and 
the 

<emphasis id="em1021" effect="italics">
behavior 

</emphasis>
of a new type 

<emphasis id="em1022" effect="italics">
(present the specification to the compiler)

</emphasis>
 
using the keyword 

<emphasis id="strong1012" effect="bold">
class

</emphasis>
. In other words, the keyword


<emphasis id="strong1013" effect="bold">
class 

</emphasis>
is used to convert the specification of a new type into something 
that the compiler can work with; a 

<emphasis id="em1023" effect="italics">
set of plans

</emphasis>
 as it were. To 
define a class is to go from the abstract to the concrete.

</para>





<para id="p1032">
<emphasis id="strong1014" effect="bold">
Create instances of the new type

</emphasis>
</para>





<para id="p1033">
Once the new type 

<emphasis id="em1024" effect="italics">
(class)

</emphasis>
 is defined, one or more objects of that type 
can be brought into being 

<emphasis id="em1025" effect="italics">
(instantiated, caused to occupy memory)

</emphasis>
.


</para>





<para id="p1034">
<emphasis id="strong1015" effect="bold">
Objects have state and behavior

</emphasis>
</para>





<para id="p1035">
Once instantiated, the object is said to have 

<emphasis id="em1026" effect="italics">
state 

</emphasis>
and


<emphasis id="em1027" effect="italics">
behavior

</emphasis>
. The 

<emphasis id="em1028" effect="italics">
state 

</emphasis>
of an object is determined by the current 
values of the data that it contains and the 

<emphasis id="em1029" effect="italics">
behavior 

</emphasis>
of an object is 
determined by its methods.

</para>





<para id="p1036">
<emphasis id="strong1016" effect="bold">
The state and behavior of a GUI Button object

</emphasis>
</para>





<para id="p1037">
For example, if we think of a GUI 

<emphasis id="strong1017" effect="bold">
Button

</emphasis>
 as an object, it is fairly 
easy to visualize the object's state and behavior. 

</para>





<para id="p1038">
A GUI Button can usually manifest any of a number of different states: size, 
position, depressed image, not depressed image, label, etc. Each of these states 
is determined by data stored in the 

<emphasis id="em1030" effect="italics">
instance variables

</emphasis>
 of the


<emphasis id="strong1018" effect="bold">
Button

</emphasis>
 object at any given point in time. 

<emphasis id="em1031" effect="italics">
(The combination of one or 
more instance variables that determine a particular state is often referred to 
as a property of the object.)

</emphasis>
 

</para>





<para id="p1039">
Similarly, it is not too difficult to visualize the behavior of a GUI


<emphasis id="strong1019" effect="bold">
Button

</emphasis>
. When you click it with the mouse, some specific action usually 
occurs.

</para>





<para id="p1040">
<emphasis id="strong1020" effect="bold">
An ActionScript class named Button

</emphasis>
</para>





<para id="p1041">
If you dig deeply enough into the ActionScript 
 class library, you 
will find that there is a class named 

<emphasis id="strong1021" effect="bold">
Button

</emphasis>
. Each individual


<emphasis id="strong1022" effect="bold">
Button

</emphasis>
 object in a Flex application is an instance of the ActionScript 
class named 

<emphasis id="strong1023" effect="bold">
Button

</emphasis>
.

</para>





<para id="p1042">
<emphasis id="strong1024" effect="bold">
The state of Button objects

</emphasis>
</para>





<para id="p1043">
Each 

<emphasis id="strong1025" effect="bold">
Button

</emphasis>
 object has instance variables, which it does not share 
with other 

<emphasis id="strong1026" effect="bold">
Button

</emphasis>
 objects. The values of the instance variables 
define the 

<emphasis id="em1032" effect="italics">
state 

</emphasis>
of the button at any given time. Other 

<emphasis id="strong1027" effect="bold">
Button

</emphasis>
 
objects in the same scope can have different values in their instance variables. 
Hence they can have a different state.

</para>





<para id="p1044">
<emphasis id="strong1028" effect="bold">
The behavior of a Button object

</emphasis>
</para>





<para id="p1045">
Each Button object also has certain fundamental behaviors such as responding 
to a mouse 

<emphasis id="strong1029" effect="bold">
click

</emphasis>
 event or responding to a 

<emphasis id="strong1030" effect="bold">
mouseOver

</emphasis>
 event. 

</para>





<para id="p1046">
The ActionScript programmer has control over the code that is executed in 
response to the event. However, the ActionScript programmer has no control 
over the fact that a 

<emphasis id="strong1031" effect="bold">
Button

</emphasis>
 object will respond to such an event. 
The fact that a 

<emphasis id="strong1032" effect="bold">
Button

</emphasis>
 will respond to certain event types is an inherent 
part of the type specification for the 

<emphasis id="strong1033" effect="bold">
Button

</emphasis>
 class and can only be 
modified by modifying the source code for the 

<emphasis id="strong1034" effect="bold">
Button

</emphasis>
 class.

</para>





</section>
<section id="h21004">
<title>
<emphasis id="Encapsulation" effect="bold">

Encapsulation

</emphasis>


</title>





<para id="p1047">
If abstraction is the design or specification of a new type, then 
encapsulation is its definition and implementation. 

</para>





<para id="p1048">
A programmer defines the data representation and the behavior of an abstract 
data type into a class, thereby defining its implementation and its interface. 
That data representation and behavior is then encapsulated in objects that are 
instantiated from the class.

</para>





<para id="p1049">
<emphasis id="strong1035" effect="bold">
Expose the interface and hide the implementation

</emphasis>
</para>





<para id="p1050">
According to good object-oriented programming practice, an encapsulated 
design usually exposes the interface and hides the implementation. This is 
accomplished in different ways with different languages. 

</para>





<para id="p1051">
Just as most of us don't usually need to care about how the steering 
mechanism of a car is implemented, a user of a class should not need to care 
about the details of implementation for that class.

</para>





<para id="p1052">
The user of the class 

<emphasis id="em1033" effect="italics">
(the using programmer)

</emphasis>
 should only need to care 
that it works as advertised. Of course this assumes that the user of the class 
has access to good documentation describing the interface and the behavior of 
objects instantiated from the class.

</para>





<para id="p1053">
<emphasis id="strong1036" effect="bold">
Should be able to change the implementation later

</emphasis>
</para>





<para id="p1054">
For a properly designed class, the class designer should be able to come back 
later and change the implementation, perhaps changing the type of data structure 
used to store data in the object, and the using programs should not be affected 
by the change.

</para>





<para id="p1055">
<emphasis id="strong1037" effect="bold">
Class member access control

</emphasis>
</para>





<para id="p1056">
Object-oriented programming languages usually provide the ability to control 
access to the members of a class. For example, ActionScript, C++ and Java all 
use the keywords 

<emphasis id="strong1038" effect="bold">
public

</emphasis>
, 

<emphasis id="strong1039" effect="bold">
private

</emphasis>
, and 

<emphasis id="strong1040" effect="bold">
protected 

</emphasis>
to control 
access to the individual members of a class. In addition, ActionScript and 
Java add a fourth level of access control, which is called 

<emphasis id="strong1041" effect="bold">
internal

</emphasis>
 in 
ActionScript and is called 

<emphasis id="strong1042" effect="bold">
package-private

</emphasis>
 in Java. 

<emphasis id="em1034" effect="italics">
(See Class 
property attributes in a companion document on ActionScript Resources.)

</emphasis>
</para>





<para id="p1057">
<emphasis id="strong1043" effect="bold">
Public, private, and protected

</emphasis>
</para>





<para id="p1058">
To a first approximation, you can probably guess what 

<emphasis id="strong1044" effect="bold">
public

</emphasis>
 and


<emphasis id="strong1045" effect="bold">
private 

</emphasis>
mean. Public members are accessible by all code that has access 
to an object of the class. Private members are accessible only by members 
belonging to the class.

</para>





<para id="p1059">
The 

<emphasis id="strong1046" effect="bold">
protected

</emphasis>
 keyword is used to provide inherited classes with 
special access to the members of their base classes.

</para>





<para id="p1060">
<emphasis id="strong1047" effect="bold">
A public user interface

</emphasis>
</para>





<para id="p1061">
In general, the user interface for a class consists of the 

<emphasis id="strong1048" effect="bold">
public 

</emphasis>

methods. 

<emphasis id="em1035" effect="italics">
(The variables in a class can also be declared public but this 
is generally considered to be bad programming practice unless they are actually 
constants.

</emphasis>
<emphasis id="strong1049" effect="bold">
<emphasis id="em1036" effect="italics">
)

</emphasis>
</emphasis>
</para>





<para id="p1062">
For a properly designed class, the class user stores, reads, and modifies 
values in the object's data by calling the 

<emphasis id="strong1050" effect="bold">
public

</emphasis>
 methods on a specific 
instance 

<emphasis id="em1037" effect="italics">
(object)

</emphasis>
 of the class. 

<emphasis id="em1038" effect="italics">
(This is sometimes referred to as 
sending a message to the object asking it to change its state)

</emphasis>
.

</para>





<para id="p1063">
ActionScript has a special form of method, often called an 

<emphasis id="em1039" effect="italics">
implicit setter

</emphasis>
 
method or an 

<emphasis id="em1040" effect="italics">
implicit getter

</emphasis>
 method that is specifically used for this 
purpose. 

<emphasis id="em1041" effect="italics">
(You will see several implicit setter methods in the program 
that I will explain later in this lesson.)

</emphasis>
</para>





<para id="p1064">
Normally, if the class is properly designed and the implementation is hidden, 
the user cannot modify the values contained in the instance variables of the 
object without going through the prescribed public methods in the interface.

</para>





<para id="p1065">
<emphasis id="strong1051" effect="bold">
Not a good design by default

</emphasis>
</para>





<para id="p1066">
An object-oriented design is not a good design by default. In an attempt to 
produce good designs, experienced object-oriented programmers generally agree on 
certain design standards for classes. For example, the data members


<emphasis id="em1042" effect="italics">
(instance variables)

</emphasis>
 are usually 

<emphasis id="strong1052" effect="bold">
private

</emphasis>
 unless they are 
constants. The user interface usually consists only of 

<emphasis id="strong1053" effect="bold">
public

</emphasis>
 methods and 
includes few if any data members.

</para>





<para id="p1067">
Of course, there are exceptions to every rule. One exception to this 
general rule is that data members that are intended to be used as symbolic 
constants are made public and defined in such a way that their values cannot be 
modified. 

</para>





<para id="p1068">
The methods in the interface should control access to, or provide a pathway 
to the private instance variables.

</para>





<para id="p1069">
<emphasis id="strong1054" effect="bold">
Not bound to the implementation

</emphasis>
</para>





<para id="p1070">
The interface should be generic in that it is not bound to any particular 
implementation. Hence, the class author should be able to change the 
implementation without affecting the using programs so long as the interface 
doesn't change.

</para>





<para id="p1071">
In practice, this means that the signatures of the interface methods should 
not change, and that the interface methods and their arguments should continue 
to have the same meaning.

</para>





</section>
</section>
<section id="h11003">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>





<para id="p1072">
In this lesson, I will present and briefly explain a program with an output 
that consists of a Flex user interface containing two custom component objects 
as shown in Figure 1. Each of the objects is intended to represent a 
single multiple-choice question in an online test. 

<emphasis id="em1043" effect="italics">
(See 

<emphasis id="strong1055" effect="bold">
Creating Online 
Tests using Custom ActionScript Components

</emphasis>



<link id="a1035" url="http://www.dickbaldwin.com/tocFlex.htm">

here

</link>

 for a detailed explanation of the 
code.)

</emphasis>
</para>





<figure id="figure1000" type="figure">
<label>Figure</label>


  

<title>
<emphasis id="Figure_1" effect="bold">
</emphasis>
Screen output for Encapsulation01.
</title>


  


    


      

 


<media id="media1000" alt="Missing image." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/as0106a.jpg" width="435" height="769"/>
</media>

 
      

<caption>Screen output for Encapsulation01.</caption>
</figure>

    


  
















<para id="p1073">
The two question objects in Figure 1 have the same behavior. And as you 
will see later, the classes from which they were instantiated have the same user 
interfaces. However, the classes are implemented in significantly 
different ways.

</para>







</section>
<section id="h11004">
<title>
<emphasis id="DiscussionandSamplePrograms" effect="bold">


</emphasis>

Discussion 
and sample code

</title>




		

<para id="p1074">



<emphasis id="strong1056" effect="bold">
Will discuss in fragments

</emphasis>




</para>





<para id="p1075">
I will discuss the code in this lesson in fragments. Listing 1 shows 
the mxml code that instantiates the two component objects shown in Figure 1. 
A complete listing of the file named 

<emphasis id="strong1057" effect="bold">
Encapsulation01.mxml

</emphasis>
 is provided in 
Listing 12 near the end of the lesson.

</para>





<example id="listing1000" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_1" effect="bold">
</emphasis>
Mxml code to instantiate two  	  custom component objects.
</title>


  


    


      

<code id="pre1000" display="block">&lt;!--The following code instantiates an object of the class
named QuizA for a multiple-choice quiz question with three
choices.--&gt;

&lt;cc:QuizA
question=
"Which of the following is not the name of one of the 
seven dwarfs?"
choice0="Dopey"
choice1="Sneezy"
choice2="Harold"
answer="2" 
/&gt;

&lt;!--The following code instantiates an object of the class
named QuizB for a multiple-choice quiz question with three
choices. Note that the interface is exactly the same as
for the class named QuizA. However, the implementation of
QuizB is radically different from QuizA.--&gt;

&lt;cc:QuizB
question=
"Which of the following is not the name of one of the 
seven dwarfs?"
choice0="Dopey"
choice1="Sneezy"
choice2="Harold"
answer="2" 
/&gt;</code>


      

</example>

    


  










<para id="p1076">
<emphasis id="strong1058" effect="bold">
The important thing...

</emphasis>
</para>





<para id="p1077">
The important thing to note in Listing 1 is that, with the exception of the 
name of the class being instantiated in each case 

<emphasis id="em1044" effect="italics">
(QuizA and QuizB)

</emphasis>
, the 
mxml code is identical for the two cases.

</para>





<para id="p1078">
The code that begins with 

<emphasis id="strong1059" effect="bold">
cc:Quiza

</emphasis>
 produces the top question object in 
Figure 1 and the code that begins with 

<emphasis id="strong1060" effect="bold">
cc:Quizb 

</emphasis>
produces the bottom question 
object in Figure 1.

</para>





<para id="p1079">
Since the mxml code for the two objects is identical, the user interface for 
the two classes must also be identical.

</para>





<para id="p1080">
<emphasis id="strong1061" effect="bold">
The project file structure

</emphasis>
</para>





<para id="p1081">
The Flex project file structure that I used for this program is fairly 
typical. However, before getting into a discussion of the two class files, 
I will show you how the files are organized in the Flex project as shown in Figure 2.

</para>




<figure id="figure1001" type="figure">
<label>Figure</label>


  

<title>
<emphasis id="Figure_2" effect="bold">
</emphasis>
File structure for the project named  Encapsulation01.
</title>


  


    


      

 


<media id="media1001" alt="Missing image." display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/as0106b.jpg" width="318" height="246"/>
</media>


      

<caption>File structure for the project named  Encapsulation01.</caption>
</figure>

    


  








 



<para id="p1082">
<emphasis id="strong1062" effect="bold">
Classes named QuizA and QuizB

</emphasis>
</para>





<para id="p1083">
As you can see from Listing 1 and Figure 2, two class files named


<emphasis id="strong1063" effect="bold">
QuizA.as

</emphasis>
 and 

<emphasis id="strong1064" effect="bold">
QuizB.as

</emphasis>
 were used to instantiate the two objects 
shown in Figure 1. Complete listings for those two files are provided in 
Listing 13 and Listing 14 near the end of the lesson.

</para>





<para id="p1084">
<emphasis id="strong1065" effect="bold">
Remember, this is a big-picture discussion

</emphasis>
</para>





<para id="p1085">
Because this is a 

<emphasis id="em1045" effect="italics">
"big-picture"

</emphasis>
 lesson, I won't explain either of 
these classes in detail in this lesson. 

<emphasis id="em1046" effect="italics">
(You can find technical details 
for a class very similar to 

<emphasis id="strong1066" effect="bold">
QuizA

</emphasis>
 in

<emphasis id="strong1067" effect="bold">
 Creating Online 
Tests using Custom ActionScript Components

</emphasis>



<link id="a1036" url="http://www.dickbaldwin.com/tocFlex.htm">

here

</link>

 you are interested in 
technical details at this point.)

</emphasis>
 Instead, I will compare the two 
class definitions from a big-picture viewpoint.

</para>





<para id="p1086">
For brevity, I will also delete some of the code such as import directives.

</para>





<para id="p1087">
<emphasis id="strong1068" effect="bold">
Beginning of the class named QuizA

</emphasis>
</para>





<para id="p1088">
The class named 

<emphasis id="strong1069" effect="bold">
QuizA

</emphasis>
 begins in Listing 2.

</para>





<example id="listing1001" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_2" effect="bold">
</emphasis>
Beginning of the class named  	  QuizA.
</title>


  


    


      

 
        

<code id="pre1001" display="block">package CustomClasses{
    //Import directives deleted for brevity.
  
  public class QuizA extends VBox{
    private var theQuestion:TextArea;
    private var choice00:RadioButton;
    private var choice01:RadioButton;
    private var choice02:RadioButton;
    private var checkButton:Button;
    private var result:TextArea;
    
    private var theAnswer:String;//numeric string
    private var correctAnswer:String;//actual string
    private var vboxWidth:int = 375;</code>


      

</example>

    


  










<para id="p1089">
<emphasis id="strong1070" effect="bold">
Variable declarations

</emphasis>
</para>





<para id="p1090">
The important thing to note in Listing 2 is the declaration of six instance 
variables of three different component types 

<emphasis id="em1047" effect="italics">
(beginning with the first line 
that reads 

<emphasis id="strong1071" effect="bold">
private var

</emphasis>
)

</emphasis>
. 
These variables will be used to hold references to the six different components 
shown in each question object in Figure 1.

</para>





<para id="p1091">
<emphasis id="strong1072" effect="bold">
TextArea, RadioButton, and Button objects

</emphasis>
</para>





<para id="p1092">
The white rectangular areas at the top and the bottom of each question object 
in Figure 1 is an object of the class named 

<emphasis id="strong1073" effect="bold">
TextArea

</emphasis>
. You can 
probably spot the three 

<emphasis id="strong1074" effect="bold">
RadioButton

</emphasis>
 objects and the 

<emphasis id="strong1075" effect="bold">
Button

</emphasis>
 object 
in each question object.

</para>





<para id="p1093">
<emphasis id="strong1076" effect="bold">
Beginning of the class named QuizB

</emphasis>
</para>





<para id="p1094">
The class named 

<emphasis id="strong1077" effect="bold">
QuizB

</emphasis>
 begins in Listing 3.

</para>





<example id="listing1002" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_3" effect="bold">
</emphasis>
Beginning of the class named  	  QuizB.
</title>


  


    


      

 
        

<code id="pre1002" display="block">package CustomClasses{
    //Import directives deleted for brevity.
  
  public class QuizB extends VBox{
    private var components:Array = 
        new Array(new TextArea(),//theQuestion
                  new RadioButton(),
                  new RadioButton(),
                  new RadioButton(),
                  new Button(),//checkButton
                  new TextArea());//result
    
    private var theAnswer:String;//numeric string
    private var correctAnswer:String;//actual string
    private var vboxWidth:int = 375;</code>


      

</example>

    


  










<para id="p1095">
<emphasis id="strong1078" effect="bold">
An array with six elements

</emphasis>
</para>





<para id="p1096">
The six instance variables that I referred to in Listing 2 were replaced 
by a single array having six elements in Listing 3. The creation of the array 
begins with the first line in Listing 3 that reads 

<emphasis id="strong1079" effect="bold">
private var

</emphasis>
.

</para>





<para id="p1097">
This is the major change that was made in the implementation of 

<emphasis id="strong1080" effect="bold">
QuizB

</emphasis>

relative to the implementation of 

<emphasis id="strong1081" effect="bold">
QuizA

</emphasis>
. This change will have 
significant ramifications throughout the remainder of the code whenever it is 
necessary to access a reference that points to one of the six components.

</para>





<para id="p1098">
<emphasis id="strong1082" effect="bold">
<emphasis id="Populated_with_six_component_objects" effect="bold">

Populated with six component objects

</emphasis>


</emphasis>
</para>





<para id="p1099">
It is also worth noting that the array elements are populated with references 
to component objects for 

<emphasis id="strong1083" effect="bold">
QuizB

</emphasis>
 when the array is created in Listing 3. 
The new component objects aren't instantiated until later in


<emphasis id="strong1084" effect="bold">
QuizA

</emphasis>
.

</para>





<para id="p1100">
<emphasis id="strong1085" effect="bold">
Implicit setter methods for QuizA

</emphasis>
</para>





<para id="p1101">
Listing 4 shows five implicit setter methods for the class named


<emphasis id="strong1086" effect="bold">
QuizA

</emphasis>
.

</para>





<example id="listing1003" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_4" effect="bold">
</emphasis>
Implicit setter methods for  	  QuizA.
</title>


  


    


      

 
        

<code id="pre1003" display="block">    public function set question(textIn:String):void{
        theQuestion.text = textIn;
    }//end implicit setter
    
    public function set answer(answerIn:String):void{
        theAnswer = answerIn;
    }//end implicit setter
    
    public function set choice0(choice:String):void{
        choice00.label=choice;
    }//end implicit setter
    
    public function set choice1(choice:String):void{
        choice01.label=choice;
    }//end implicit setter
    
    public function set choice2(choice:String):void{
        choice02.label=choice;
    }//end implicit setter</code>


      

</example>

    


  










<para id="p1102">
<emphasis id="strong1087" effect="bold">
Setter methods are called by mxml code

</emphasis>
</para>





<para id="p1103">
Briefly, these methods are called by the code in Listing 1 when values are 
assigned to the following five mxml attributes:

</para>




<list id="ul1008" list-type="bulleted">

  

<item id="li1036">
question

</item>


  

<item id="li1037">
choice0

</item>


  

<item id="li1038">
choice1

</item>


  

<item id="li1039">
choice2

</item>


  

<item id="li1040">
answer

</item>




</list>





<para id="p1104">
See 

<emphasis id="strong1088" effect="bold">
Defining 
Custom MXML Components

</emphasis>
 

<link id="a1037" url="http://www.dickbaldwin.com/tocFlex.htm">


here

</link>

 if you are interested in learning more about implicit 
setter methods at this point in time.

</para>





<para id="p1105">
<emphasis id="strong1089" effect="bold">
Implicit setter methods for QuizB

</emphasis>
</para>





<para id="p1106">
Listing 5 shows five implicit setter methods for 

<emphasis id="strong1090" effect="bold">
QuizB

</emphasis>
 that serve the 
same purpose as the five implicit setter methods for 

<emphasis id="strong1091" effect="bold">
QuizA

</emphasis>
. Note the 
differences in the code that results from using individual variables to 
reference the components in 

<emphasis id="strong1092" effect="bold">
QuizA

</emphasis>
 and using an array to 
reference the components in 

<emphasis id="strong1093" effect="bold">
QuizB

</emphasis>
.

</para>





<example id="listing1004" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_5" effect="bold">
</emphasis>
Implicit setter methods for  	  QuizB.
</title>


  


    


      

 
        

<code id="pre1004" display="block">    public function set question(textIn:String):void{
        components[0].text = textIn;
    }//end implicit setter
    
    public function set answer(answerIn:String):void{
        theAnswer = answerIn;
    }//end implicit setter
    
    public function set choice0(choice:String):void{
        components[1].label=choice;
    }//end implicit setter
    
    public function set choice1(choice:String):void{
        components[2].label=choice;
    }//end implicit setter
    
    public function set choice2(choice:String):void{
        components[3].label=choice;
    }//end implicit setter</code>


      

</example>

    


  










<para id="p1107">
<emphasis id="strong1094" effect="bold">
Expose the interface but hide the implementation

</emphasis>
</para>





<para id="p1108">
These five setter methods, along with the class constructors, constitute the 
entire user interface for each class. If you examine Listing 13 and 
Listing 14, you will see that these five setter methods and the constructor are 
the only 

<emphasis id="strong1095" effect="bold">
public

</emphasis>
 members of either class. All other members of the 
classes are declared 

<emphasis id="strong1096" effect="bold">
private

</emphasis>
.

</para>





<para id="p1109">
Furthermore:

</para>




<list id="ul1009" list-type="bulleted">

  

<item id="li1041">
The names of the five methods are the same in both classes.

</item>


  

<item id="li1042">
The names and types of the required parameters for the five methods are 
  the same in both classes.

</item>


  

<item id="li1043">
The five methods serve the same purpose in both classes.

</item>


  

<item id="li1044">
The ultimate behavior of objects instantiated from the two classes is the 
  same.

</item>




</list>





<para id="p1110">
Therefore, the exposed user interface is the same for both classes but the 
hidden implementation is significantly different between the two classes.

</para>





<para id="p1111">
<emphasis id="strong1097" effect="bold">
Purpose of the setter methods

</emphasis>
</para>





<para id="p1112">
The purpose of the setter methods in both cases is to store mxml attribute 
values in the 

<emphasis id="strong1098" effect="bold">
text

</emphasis>
 property of the 

<emphasis id="strong1099" effect="bold">
TextArea

</emphasis>
 at the top of each 
question object in Figure 1 and to store mxml attribute values in the


<emphasis id="strong1100" effect="bold">
label

</emphasis>
 property of each of the 

<emphasis id="strong1101" effect="bold">
RadioButton

</emphasis>
 objects in each question 
object in Figure 1. In addition, one of the setter methods stores an 
attribute value in the variable named 

<emphasis id="strong1102" effect="bold">
theAnswer

</emphasis>
.

</para>





<para id="p1113">
If you compare the code in Figure 4 and Figure 5, you will 
see that Figure 4 stores the incoming parameter values by way of the contents of 
four instance variables whereas Figure 5 stores the incoming parameter values by 
way of the contents of four elements in the array.

</para>





<para id="p1114">
<emphasis id="strong1103" effect="bold">
Constructor for QuizA

</emphasis>
</para>





<para id="p1115">
Listing 6 shows the constructor for the class named 

<emphasis id="strong1104" effect="bold">
QuizA

</emphasis>
.

</para>





<example id="listing1005" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_6" effect="bold">
</emphasis>
Constructor for QuizA.
</title>


  


    


      

 
        

<code id="pre1005" display="block">    public function QuizA(){//constructor
      width=vboxWidth;
      setStyle("borderStyle","solid");
      setStyle("backgroundColor",0xffff00);
      
      theQuestion = new TextArea();
      theQuestion.editable = false;
      theQuestion.width=vboxWidth - 2;
      addChild(theQuestion);

      choice00 = new RadioButton();
      choice00.groupName="radioButtonGroup";
      addChild(choice00);
      
      choice01 = new RadioButton();
      choice01.groupName="radioButtonGroup";
      addChild(choice01);
      
      choice02 = new RadioButton();
      choice02.groupName="radioButtonGroup";
      addChild(choice02);
      
      checkButton = new Button();
      checkButton.label = "Click to Check Answer";
      checkButton.addEventListener(MouseEvent.CLICK,
                                   checkButtonHandler);
      addChild(checkButton);
      
      result = new TextArea();
      result.editable = false;
      result.width=vboxWidth - 2;
      result.visible=false;
      addChild(result);
      
      //Register an event listener that will be
      // executed when this object has been fully
      // constructed. It will set the height of
      // the VBox based on the sum of the heights
      // of the components.
      this.addEventListener(
                    mx.events.FlexEvent.CREATION_COMPLETE,
                    vboxCompleteHandler);
    }//end constructor</code>


      

</example>

    


  










<para id="p1116">
There are numerous differences between the code in the constructors for


<emphasis id="strong1105" effect="bold">
QuizA

</emphasis>
 and 

<emphasis id="strong1106" effect="bold">
QuizB

</emphasis>
. Every statement that needs to access a 
reference pointing to one of the six component objects in Figure 1 is different 
between the two constructors because of the difference in the way those 
references are stored. There are other differences as well, which are shown in Listing 6.

</para>





<para id="p1117">
<emphasis id="strong1107" effect="bold">
Constructor for QuizB

</emphasis>
</para>





<para id="p1118">
The constructor for the class named 

<emphasis id="strong1108" effect="bold">
QuizB

</emphasis>
 is shown in Listing 7.

</para>





<example id="listing1006" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_7" effect="bold">
</emphasis>
Constructor for QuizB.
</title>


  


    


      

 
        

<code id="pre1006" display="block">    public function QuizB(){//constructor
      width=vboxWidth;
      setStyle("borderStyle","solid");
      setStyle("backgroundColor",0xffff00);

      components[0].editable = false;//theQuestion
      components[0].width=vboxWidth - 2;
      
      components[1].groupName="radioButtonGroup";
      components[2].groupName="radioButtonGroup";
      components[3].groupName="radioButtonGroup";
      
      //checkButton
      components[4].label = "Click to Check Answer";
      components[4].addEventListener(MouseEvent.CLICK,
                                   checkButtonHandler);
      
      //result
      components[5].editable = false;
      components[5].width=vboxWidth - 2;
      components[5].visible=false;

      //Add GUI components to the VBox.
      for(var cnt:int = 0;cnt &lt; components.length;cnt++){
        addChild(components[cnt]);
      }//end for loop

      //Register an event listener that will be
      // executed when this VBox object has been fully
      // constructed. It will set the height of
      // the VBox based on the sum of the heights
      // of the components.
      this.addEventListener(
                    mx.events.FlexEvent.CREATION_COMPLETE,
                    vboxCompleteHandler);
    }//end constructor</code>


      

</example>

    


  










<para id="p1119">
In addition to the differences in the way that references to the six component 
objects are accessed, Listing 7 contains other significant differences as 
well.

</para>





<para id="p1120">
<emphasis id="strong1109" effect="bold">
No code to instantiate the six component objects

</emphasis>
</para>





<para id="p1121">
First, there is no code in Listing 7 to instantiate the six component 
objects. As I mentioned earlier, those objects were 
instantiated and used to populate the six-element array referred to by


<emphasis id="strong1110" effect="bold">
components

</emphasis>
 when the array was created.

</para>





<para id="p1122">
<emphasis id="strong1111" effect="bold">
Only one statement calling the addChild method in 
QuizB

</emphasis>
</para>





<para id="p1123">
Next, you will notice that there are six statement making calls to the


<emphasis id="strong1112" effect="bold">
addChild

</emphasis>
 method of the 

<emphasis id="strong1113" effect="bold">
VBox

</emphasis>
 container in Listing 6. Calls to 
that method cause the components to be added as children of the container.

</para>





<para id="p1124">
Those six calls to the 

<emphasis id="strong1114" effect="bold">
addChild

</emphasis>
 method were consolidated into a single 
call inside a 

<emphasis id="strong1115" effect="bold">
for

</emphasis>
 loop in Listing 7. 
This is possible because the six references are contained in an array whose 
elements can be accessed using a numeric index.

</para>





<para id="p1125">
<emphasis id="strong1116" effect="bold">
The checkButtonHandler for QuizB

</emphasis>
</para>





<para id="p1126">
Listing 8 shows the 

<emphasis id="strong1117" effect="bold">
checkButtonHandler

</emphasis>
 method for the class named


<emphasis id="strong1118" effect="bold">
QuizA

</emphasis>
.

</para>





<example id="listing1007" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_8" effect="bold">
</emphasis>
The checkButtonHandler for  	  QuizA.
</title>


  


    


      

 
        

<code id="pre1007" display="block">    private function checkButtonHandler(
                                   event:MouseEvent):void{
      result.visible=true;
      
      if(theAnswer == "0"){
        correctAnswer = choice00.label;
      }else if(theAnswer == "1"){
        correctAnswer = choice01.label;
      }else{
        correctAnswer = choice02.label;
      }//end else
                
      if((theAnswer=="0" &amp;&amp; choice00.selected) || 
           (theAnswer=="1" &amp;&amp; choice01.selected) ||
           (theAnswer=="2" &amp;&amp; choice02.selected)){
        
        result.setStyle("color",0x00ff00);
        result.text = "Correct\nCorrect Answer is: "
                     + correctAnswer;
      }else{
        result.setStyle("color",0xff0000);
        result.text = "Wrong\nCorrect Answer is: "
                     + correctAnswer;
      }//end else
    }//end checkButtonHandler</code>


      

</example>

    


  










<para id="p1127">
This is the event handler method that is registered for a 

<emphasis id="strong1119" effect="bold">
click

</emphasis>
 event 
on the 

<emphasis id="strong1120" effect="bold">
Button

</emphasis>
 by the code in Listing 6.

</para>





<para id="p1128">
<emphasis id="strong1121" effect="bold">
The checkButtonHandler for QuizB

</emphasis>
</para>





<para id="p1129">
Listing 9 shows the corresponding 

<emphasis id="strong1122" effect="bold">
checkButtonHandler

</emphasis>
 method for the 
class named 

<emphasis id="strong1123" effect="bold">
QuizB

</emphasis>
.

</para>





<example id="listing1008" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_9" effect="bold">
</emphasis>
The checkButtonHandler for  	  QuizB.
</title>


  


    


      

 
        

<code id="pre1008" display="block">    private function checkButtonHandler(
                                   event:MouseEvent):void{
      components[5].visible=true;
      
      if(theAnswer == "0"){
        correctAnswer = components[1].label;
      }else if(theAnswer == "1"){
        correctAnswer = components[2].label;
      }else{
        correctAnswer = components[3].label;
      }//end else
                
      if((theAnswer=="0" &amp;&amp; components[1].selected) || 
         (theAnswer=="1" &amp;&amp; components[2].selected) ||
         (theAnswer=="2" &amp;&amp; components[3].selected)){
        
        components[5].setStyle("color",0x00ff00);
        components[5].text = 
                           "Correct\nCorrect Answer is: "
                           + correctAnswer;
      }else{
        components[5].setStyle("color",0xff0000);
        components[5].text = "Wrong\nCorrect Answer is: "
                     + correctAnswer;
      }//end else
    }//end checkButtonHandler</code>


      

</example>

    


  










<para id="p1130">
This is the event handler method that is registered for a 

<emphasis id="strong1124" effect="bold">
click

</emphasis>
 event 
on the 

<emphasis id="strong1125" effect="bold">
Button

</emphasis>
 by the code in Listing 7.

</para>





<para id="p1131">
<emphasis id="strong1126" effect="bold">
Differences between the code

</emphasis>
</para>





<para id="p1132">
The differences between the methods named 

<emphasis id="strong1127" effect="bold">
checkButtonHandler

</emphasis>
 in 
the two classes result from the different access requirements for the three radio 
buttons and the text area at the bottom of the question objects in Figure 1.


</para>





<para id="p1133">
In one case 

<emphasis id="em1048" effect="italics">
(QuizA)

</emphasis>
, access is by way of the named reference variables 
that were declared in Listing 2. In the other case

<emphasis id="em1049" effect="italics">
(QuizB)

</emphasis>
, access 
to each component object's reference is by way of an element of the array that 
was created in Listing 3.

</para>





<para id="p1134">
<emphasis id="strong1128" effect="bold">
The vboxCompleteHandler for QuizA

</emphasis>
</para>





<para id="p1135">
The 

<emphasis id="strong1129" effect="bold">
vboxCompleteHandler

</emphasis>
 method for the class named 

<emphasis id="strong1130" effect="bold">
QuizA

</emphasis>
 is 
shown in Listing 10.

</para>





<example id="listing1009" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_10" effect="bold">
</emphasis>
The vboxCompleteHandler for  	  QuizA.
</title>


  


    


      

 
        

<code id="pre1009" display="block">    private function vboxCompleteHandler(
                          event:mx.events.FlexEvent):void{

      this.height = 
        theQuestion.height
        + choice00.height
        + choice01.height
        + choice02.height
        + checkButton.height
        + result.height
        + 36;//six spaces per compnent
    }//end vboxCompleteHandler
    //==================================================//
  }//end class
}//end package</code>


      

</example>

    


  










<para id="p1136">
<emphasis id="strong1131" effect="bold">
Registered by the code in Listing 6

</emphasis>
</para>





<para id="p1137">
This is the event handler method that was registered on the 

<emphasis id="strong1132" effect="bold">
VBox

</emphasis>

container by the code near the bottom of Listing 6. The purpose of this event 
handler is to execute when the 

<emphasis id="strong1133" effect="bold">
VBox

</emphasis>
 construction is complete and to set 
the height of the 

<emphasis id="strong1134" effect="bold">
VBox

</emphasis>
 container to the heights of the six individual 
components plus six pixels per component to account for the space between 
components.

</para>





<para id="p1138">
Listing 10 accesses the individual height values by way of the six reference 
variables declared in Listing 2.

</para>





<para id="p1139">
<emphasis id="strong1135" effect="bold">
The vboxCompleteHandler for QuizB

</emphasis>
</para>





<para id="p1140">
The 

<emphasis id="strong1136" effect="bold">
vboxCompleteHandler

</emphasis>
 method for 

<emphasis id="strong1137" effect="bold">
QuizB

</emphasis>
 is shown in Listing 
11.

</para>





<example id="listing1010" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_11" effect="bold">
</emphasis>
The vboxCompleteHandler for  	  QuizB.
</title>


  


    


      

 
        

<code id="pre1010" display="block">    private function vboxCompleteHandler(
                          event:mx.events.FlexEvent):void{

      this.height = 0;
      
      for(var cnt:int = 0;cnt &lt; components.length;cnt++){
        this.height += components[cnt].height + 6;
      }//end for loop

    }//end vboxCompleteHandler
    //==================================================//
  }//end class
}//end package</code>


      

</example>

    


  










<para id="p1141">
<emphasis id="strong1138" effect="bold">
Same purpose as before

</emphasis>
</para>





<para id="p1142">
This event handler method has the same purpose as the event handler method 
with the same name in Listing 10.

</para>





<para id="p1143">
Once again, because the references to the components are stored in an array, 
a 

<emphasis id="strong1139" effect="bold">
for

</emphasis>
 loop can be used to access and get the height of each of the 
components and to compute the overall height as the sum of those heights plus 
six pixels for each component.

</para>





<para id="p1144">
<emphasis id="strong1140" effect="bold">
The end of the program

</emphasis>
</para>





<para id="p1145">
Listing 10 and Listing 11 each signal the end of the class and the end of the 
program.

</para>







</section>
<section id="h11005">
<title>
<emphasis id="Runtheprogram" effect="bold">


</emphasis>

Run the program

</title>







<para id="p1146">
I encourage you to 

<link id="a1038" url="Encapsulation01.html">

run

</link>

 this 
program from the web. Then copy the code from Listing 12, Listing 13, and 
Listing 14. Use that code to create a Flex project. Compile and run 
the project. Experiment with the code, making changes, and observing the 
results of your changes. Make certain that you can explain why your 
changes behave as they do. 

</para>





</section>
<section id="h11006">
<title>
<emphasis id="Resources" effect="bold">

Resources

</emphasis>


</title>


		

<para id="p1147">
I will publish a list containing links to ActionScript resources as a separate document. Search for ActionScript Resources in the Connexions search box.

</para>


		

		

</section>
<section id="h11007">
<title>
<emphasis id="Complete_program_listings" effect="bold">

Complete program listings

</emphasis>


</title>






<para id="p1148">
Complete listings of the Flex MXML and ActionScript source code discussed in 
this lesson are provided in Listing 12 through Listing 14.

</para>

 



<example id="listing1011" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_12" effect="bold">
</emphasis>
Source code for  	  Encapsulation01.mxml.
</title>


  


    


      

 
        

<code id="pre1011" display="block">&lt;?xml version="1.0" encoding="utf-8"?&gt;

&lt;!--TestGenerator01
  This application illustrates the concept of exposing
  the interface and hiding the implementation. Two
  classes are defined from which custom components are
  instantiated. Components instantiated from both classes
  have the same user interface but they have radically 
  different implementations.--&gt;
  
&lt;mx:Application 
  xmlns:mx="http://www.adobe.com/2006/mxml"
  xmlns:cc="CustomClasses.*"&gt;
  &lt;mx:Label text="ENCAPSULATION DEMO"/&gt;
  &lt;mx:Label text=" Copyright 2009 R.G.Baldwin" /&gt;


&lt;!--The following code instantiates an object of the class
named QuizA for a multiple-choice quiz question with three
choices.--&gt;
&lt;cc:QuizA
question=
"Which of the following is not the name of one of the 
seven dwarfs?"
choice0="Dopey"
choice1="Sneezy"
choice2="Harold"
answer="2" 
/&gt;

&lt;!--The following code instantiates an object of the class
named QuizB for a multiple-choice quiz question with three
choices. Note that the interface is exactly the same as
for the class named QuizA. However, the implementation of
QuizB is radically different from QuizA.--&gt;
&lt;cc:QuizB
question=
"Which of the following is not the name of one of the 
seven dwarfs?"
choice0="Dopey"
choice1="Sneezy"
choice2="Harold"
answer="2" 
/&gt;

  &lt;!--The purpose of the follow code is to control the
      appearance of the GUI components.--&gt;
  &lt;mx:Style&gt;
  RadioButton {
  fontWeight: bold;
  fontSize: 14;
  }
  Label{
  fontWeight: bold;
  fontSize: 18;
  color:  #FFFF00;
  }
  Button{
  fontWeight: bold;
  fontSize: 14;
  }
  TextArea{
  fontWeight: bold;
  fontSize: 14;
  }
  &lt;/mx:Style&gt;
&lt;/mx:Application&gt;</code>


      

</example>

    


  










<para id="p1149">
</para>





<example id="listing1012" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_13" effect="bold">
</emphasis>
Source code for QuizA.as.
</title>


  


    


      

 
        

<code id="pre1012" display="block">package CustomClasses{
    import flash.events.*;
    import mx.containers.VBox;
    import mx.controls.Button;
    import mx.controls.RadioButton;
    import mx.controls.TextArea;
    import mx.events.FlexEvent;
  
  public class QuizA extends VBox{
    private var theQuestion:TextArea;
    private var choice00:RadioButton;
    private var choice01:RadioButton;
    private var choice02:RadioButton;
    private var checkButton:Button;
    private var result:TextArea;
    
    private var theAnswer:String;//numeric string
    private var correctAnswer:String;//actual string
    private var vboxWidth:int = 375;
    //==================================================//
    
    public function set question(textIn:String):void{
        theQuestion.text = textIn;
    }//end implicit setter
    
    public function set answer(answerIn:String):void{
        theAnswer = answerIn;
    }//end implicit setter
    
    public function set choice0(choice:String):void{
        choice00.label=choice;
    }//end implicit setter
    
    public function set choice1(choice:String):void{
        choice01.label=choice;
    }//end implicit setter
    
    public function set choice2(choice:String):void{
        choice02.label=choice;
    }//end implicit setter
    //==================================================//
    
    public function QuizA(){//constructor
      width=vboxWidth;
      setStyle("borderStyle","solid");
      setStyle("backgroundColor",0xffff00);
      
      theQuestion = new TextArea();
      theQuestion.editable = false;
      theQuestion.width=vboxWidth - 2;
      addChild(theQuestion);

      choice00 = new RadioButton();
      choice00.groupName="radioButtonGroup";
      addChild(choice00);
      
      choice01 = new RadioButton();
      choice01.groupName="radioButtonGroup";
      addChild(choice01);
      
      choice02 = new RadioButton();
      choice02.groupName="radioButtonGroup";
      addChild(choice02);
      
      checkButton = new Button();
      checkButton.label = "Click to Check Answer";
      checkButton.addEventListener(MouseEvent.CLICK,
                                   checkButtonHandler);
      addChild(checkButton);
      
      result = new TextArea();
      result.editable = false;
      result.width=vboxWidth - 2;
      result.visible=false;
      addChild(result);
      
      //Register an event listener that will be
      // executed when this object has been fully
      // constructed. It will set the height of
      // the VBox based on the sum of the heights
      // of the components.
      this.addEventListener(
                    mx.events.FlexEvent.CREATION_COMPLETE,
                    vboxCompleteHandler);
    }//end constructor
    //==================================================//
    
    private function checkButtonHandler(
                                   event:MouseEvent):void{
      result.visible=true;
      
      if(theAnswer == "0"){
        correctAnswer = choice00.label;
      }else if(theAnswer == "1"){
        correctAnswer = choice01.label;
      }else{
        correctAnswer = choice02.label;
      }//end else
                
      if((theAnswer=="0" &amp;&amp; choice00.selected) || 
           (theAnswer=="1" &amp;&amp; choice01.selected) ||
           (theAnswer=="2" &amp;&amp; choice02.selected)){
        
        result.setStyle("color",0x00ff00);
        result.text = "Correct\nCorrect Answer is: "
                     + correctAnswer;
      }else{
        result.setStyle("color",0xff0000);
        result.text = "Wrong\nCorrect Answer is: "
                     + correctAnswer;
      }//end else
    }//end checkButtonHandler
    //==================================================//
    
    private function vboxCompleteHandler(
                          event:mx.events.FlexEvent):void{
      //Set the height equal to the sum of the
      // heights of the components plus six 
      // pixels per component to account for the
      // space between components.
      this.height = 
        theQuestion.height
        + choice00.height
        + choice01.height
        + choice02.height
        + checkButton.height
        + result.height
        + 36;//six spaces per compnent
    }//end vboxCompleteHandler
    //==================================================//
  }//end class
}//end package</code>


      

</example>

    


  










<para id="p1150">
</para>





<example id="listing1013" type="listing">
<label>Listing</label>


  

<title>
<emphasis id="Listing_14" effect="bold">
</emphasis>
Source code for QuizB.as.
</title>


  


    


      

 
        

<code id="pre1013" display="block">//This is an update of the class named QuizA. This version
// stores references to all of the GUI components in a
// six-element array and uses for loops to process them
// where appropriate. Note that the GUI components are
// instantiated and their references are stored in the
// array when the array is created.

package CustomClasses{
    import flash.events.*;
    import mx.containers.VBox;
    import mx.controls.Button;
    import mx.controls.RadioButton;
    import mx.controls.TextArea;
    import mx.events.FlexEvent;
  
  public class QuizB extends VBox{

    //References to six GUI components are stored in the
    // following array.
    private var components:Array = 
        new Array(new TextArea(),//theQuestion
                  new RadioButton(),
                  new RadioButton(),
                  new RadioButton(),
                  new Button(),//checkButton
                  new TextArea());//result
    
    private var theAnswer:String;//numeric string
    private var correctAnswer:String;//actual string
    private var vboxWidth:int = 375;
    //==================================================//
    
    public function set question(textIn:String):void{
        components[0].text = textIn;
    }//end implicit setter
    
    public function set answer(answerIn:String):void{
        theAnswer = answerIn;
    }//end implicit setter
    
    public function set choice0(choice:String):void{
        components[1].label=choice;
    }//end implicit setter
    
    public function set choice1(choice:String):void{
        components[2].label=choice;
    }//end implicit setter
    
    public function set choice2(choice:String):void{
        components[3].label=choice;
    }//end implicit setter
    //==================================================//
    
    public function QuizB(){//constructor
      width=vboxWidth;
      setStyle("borderStyle","solid");
      setStyle("backgroundColor",0xffff00);

      components[0].editable = false;//theQuestion
      components[0].width=vboxWidth - 2;
      
      components[1].groupName="radioButtonGroup";
      components[2].groupName="radioButtonGroup";
      components[3].groupName="radioButtonGroup";
      
      //checkButton
      components[4].label = "Click to Check Answer";
      components[4].addEventListener(MouseEvent.CLICK,
                                   checkButtonHandler);
      
      //result
      components[5].editable = false;
      components[5].width=vboxWidth - 2;
      components[5].visible=false;

      //Add GUI components to the VBox.
      for(var cnt:int = 0;cnt &lt; components.length;cnt++){
        addChild(components[cnt]);
      }//end for loop

      //Register an event listener that will be
      // executed when this VBox object has been fully
      // constructed. It will set the height of
      // the VBox based on the sum of the heights
      // of the components.
      this.addEventListener(
                    mx.events.FlexEvent.CREATION_COMPLETE,
                    vboxCompleteHandler);
    }//end constructor
    //==================================================//
    
    private function checkButtonHandler(
                                   event:MouseEvent):void{
      components[5].visible=true;
      
      if(theAnswer == "0"){
        correctAnswer = components[1].label;
      }else if(theAnswer == "1"){
        correctAnswer = components[2].label;
      }else{
        correctAnswer = components[3].label;
      }//end else
                
      if((theAnswer=="0" &amp;&amp; components[1].selected) || 
         (theAnswer=="1" &amp;&amp; components[2].selected) ||
         (theAnswer=="2" &amp;&amp; components[3].selected)){
        
        components[5].setStyle("color",0x00ff00);
        components[5].text = 
                           "Correct\nCorrect Answer is: "
                           + correctAnswer;
      }else{
        components[5].setStyle("color",0xff0000);
        components[5].text = "Wrong\nCorrect Answer is: "
                     + correctAnswer;
      }//end else
    }//end checkButtonHandler
    //==================================================//
    
    private function vboxCompleteHandler(
                          event:mx.events.FlexEvent):void{
      //Set the height equal to the sum of the
      // heights of the components plus six 
      // pixels per component to account for the
      // space between components.
      this.height = 0;
      for(var cnt:int = 0;cnt &lt; components.length;cnt++){
        this.height += components[cnt].height + 6;
      }//end for loop

    }//end vboxCompleteHandler
    //==================================================//
  }//end class
}//end package</code>


      

</example>

    


  












</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>




<para id="p1151">
This section contains a variety of miscellaneous materials.

</para>







<note id="note1002" type="miscellaneous">







<emphasis id="strong1141" effect="bold">
Housekeeping material

</emphasis>



<list id="ul1010" list-type="bulleted">



<item id="li1045">
Module name: Encapsulation - The Big Picture

</item>




<item id="li1046">
Files:

<list id="ul1011" list-type="bulleted">



<item id="li1047">
ActionScript0106\ActionScript0106.htm

</item>




<item id="li1048">
ActionScript0106\Connexions\ActionScriptXhtml0106.htm

</item>




</list>




</item>




</list>




</note>









<note id="note1003" type="miscellaneous">




<emphasis id="strong1142" effect="bold">
PDF disclaimer:

</emphasis>
 Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.


</note>






		

<para id="p1152">
-end- 

</para>




<para id="p1153">
</para>




</section>
</content>




</document>