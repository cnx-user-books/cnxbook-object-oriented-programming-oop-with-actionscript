<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Using Chroma Key Compositing to Create Transparent Backgrounds</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m34463</md:content-id>
  <md:title>Using Chroma Key Compositing to Create Transparent Backgrounds</md:title>
  <md:abstract>Learn how to convert an image with a constant color background into an image with a transparent background. This involves the use of a technique commonly known as chroma key compositing.</md:abstract>
  <md:uuid>0fb3dfc4-438d-4468-9bd5-cdb342a5b2bc</md:uuid>
</metadata>

<content>




















<note id="note1000" type="miscellaneous">





	

<emphasis id="Click" effect="bold">

Click

</emphasis>

 

<link id="a1000" url="ChromaKey01.html">

ChromaKey01

</link>


to run this ActionScript program. 

<emphasis id="em1000" effect="italics">

(Click the "Back" button in your browser
to return to this page.)

</emphasis>



</note>






<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1001" target-id="Preface">

Preface

</link>


<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1002" target-id="General">

General

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1003" list-type="bulleted">

				

<item id="li1003">
<link id="a1004" target-id="Figures">

Figures

</link>


</item>


				

<item id="li1004">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>


			

</list>


			

</item>


		

</list>


		

</item>


		

<item id="li1005">
<link id="a1006" target-id="Supplemental_material">

Supplemental material

</link>


</item>


	

</list>


	

</item>


	

<item id="li1006">
<link id="a1007" target-id="General_background_information">

General background information

</link>


</item>


	

<item id="li1007">
<link id="a1008" target-id="Preview">

Preview

</link>


</item>


	

<item id="li1008">
<link id="a1009" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


</item>


	

<item id="li1009">
<link id="a1010" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1010">
<link id="a1011" target-id="Resources">

Resources

</link>


</item>


	

<item id="li1011">
<link id="a1012" target-id="Complete_program_listing">

Complete program listings

</link>


</item>


	

<item id="li1012">
<link id="a1013" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>







</section>
<section id="h11001">
<title>
 

<emphasis id="Preface" effect="bold">


</emphasis>

Preface

</title>






<section id="h21000">
<title>
 

<emphasis id="General" effect="bold">

General

</emphasis>


</title>








  

<note id="note1001" type="miscellaneous">


  

All references to ActionScript in this lesson are references to 
	  version 3 or later.


</note>






<para id="p1000">
This tutorial lesson is part of a series of lessons dedicated to 
object-oriented programming 

<emphasis id="em1001" effect="italics">
(OOP)

</emphasis>
 with ActionScript.

</para>




<para id="p1001">
<emphasis id="strong1000" effect="bold">
Several ways to create and launch ActionScript programs

</emphasis>
</para>




<para id="p1002">
There are several ways to create and launch programs written in the 
ActionScript programming language. Many of the lessons in this series will use 
Adobe Flex as the launch pad for the sample ActionScript programs.

</para>




<para id="p1003">
<emphasis id="strong1001" effect="bold">
Getting started

</emphasis>
</para>




<para id="p1004">
An earlier lesson titled 


<emphasis id="strong1002" effect="bold">
The Default 
Application Container

</emphasis>
 provided information on how to get started programming 
with Adobe's Flex Builder 3.

</para>




<para id="p1005">
The lesson titled


<emphasis id="strong1003" effect="bold">
Using Flex 3 in 
a Flex 4 World

</emphasis>
 was added later to accommodate the release of Flash Builder 
4. 

<emphasis id="em1002" effect="italics">

(See 

<link id="a1014" url="http://www.dickbaldwin.com/tocFlex.htm">

Baldwin's Flex programming 
website

</link>

.)

</emphasis>
</para>




<para id="p1006">
You should study those lessons before embarking on the lessons in this 
series.

</para>




<para id="p1007">
<emphasis id="strong1004" effect="bold">
Some understanding of Flex MXML will be required

</emphasis>
</para>




<para id="p1008">
I also recommend that you study all of the lessons on


<link id="a1015" url="http://www.dickbaldwin.com/tocFlex.htm">

Baldwin's Flex programming 
website

</link>

 in parallel with your study of these ActionScript lessons. 
Eventually you will probably need to understand both ActionScript and Flex and 
the relationships that exist between them in order to become a successful 
ActionScript programmer. 

</para>




<para id="p1009">
<emphasis id="strong1005" effect="bold">
Will emphasize ActionScript code

</emphasis>
</para>




<para id="p1010">
It is often possible to use either ActionScript code or Flex MXML code to 
achieve the same result. Insofar as this series of lessons is concerned, the 
emphasis will be on ActionScript code even in those cases where Flex MXML code 
may be a suitable alternative.

</para>




</section>
<section id="h21001">
<title>
 

<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>




<para id="p1011">
 I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.

</para>




<section id="h31000">
<title>
 

<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>




<list id="ul1004" list-type="bulleted">

	

<item id="li1013">
<link id="a1016" target-id="Figure_1">

Figure 1

</link>

. Screen output for the program named 
	ChromaKey01.

</item>




</list>




</section>
<section id="h31001">
<title>
 

<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1005" list-type="bulleted">

	

<item id="li1014">
<link id="a1017" target-id="Listing_1">

Listing 1

</link>

. Beginning of the class named Driver. 

</item>


	

<item id="li1015">
<link id="a1018" target-id="Listing_2">

Listing 2

</link>

. The constructor for the class named 
	Driver. 

</item>


	

<item id="li1016">
<link id="a1019" target-id="Listing_3">

Listing 3

</link>

. The CREATION_COMPLETE event handler. 

</item>


	

<item id="li1017">
<link id="a1020" target-id="Listing_4">

Listing 4

</link>

. Beginning of the 

<emphasis id="em1003" effect="italics">

	processChromaKey

</emphasis>
 method. 

</item>


	

<item id="li1018">
<link id="a1021" target-id="Listing_5">

Listing 5

</link>

. Set selected alpha values to zero. 

</item>


	

<item id="li1019">
<link id="a1022" target-id="Listing_6">

Listing 6

</link>

. Store the modified pixel data in the 
	bitmap.

</item>


	

<item id="li1020">
<link id="a1023" target-id="Listing_7">

Listing 7

</link>

. Listing of the class named Driver. 

</item>


	

<item id="li1021">
<link id="a1024" target-id="Listing_8">

Listing 8

</link>

. Listing of the MXML file. 

</item>




</list>




</section>
</section>
<section id="h21002">
<title>
 

<emphasis id="Supplemental_material" effect="bold">

Supplemental material

</emphasis>


</title>




<para id="p1012">
 I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials. You will find a consolidated index at


<link id="a1025" url="http://www.dickbaldwin.com/toc.htm">


www.DickBaldwin.com

</link>

.

</para>




</section>
</section>
<section id="h11002">
<title>
 

<emphasis id="General_background_information" effect="bold">

General background 
information

</emphasis>


</title>




<para id="p1013">
In an earlier lesson titled


<emphasis id="strong1006" effect="bold">
Bitmap Basics

</emphasis>
, I explained the differences between Flex projects and 
ActionScript projects. I also introduced you to the classes named 

<emphasis id="strong1007" effect="bold">
Bitmap

</emphasis>
 
and 

<emphasis id="strong1008" effect="bold">
BitmapData

</emphasis>
. 

</para>




<para id="p1014">
<emphasis id="strong1009" effect="bold">
The fundamentals of pixel processing

</emphasis>
</para>




<para id="p1015">
In the lesson titled


<emphasis id="strong1010" effect="bold">
Fundamentals of Image Pixel Processing

</emphasis>
, I showed you how to:

</para>




<list id="ul1006" list-type="bulleted">

	

<item id="li1022">
Load the contents of an image file into a 

<emphasis id="strong1011" effect="bold">
BitmapData

</emphasis>
 
	object encapsulated in a 

<emphasis id="strong1012" effect="bold">
Bitmap

</emphasis>
 object.

</item>


	

<item id="li1023">
Use the 

<emphasis id="strong1013" effect="bold">
setPixel32

</emphasis>
, 

<emphasis id="strong1014" effect="bold">
getPixels

</emphasis>
, and
	

<emphasis id="strong1015" effect="bold">
setPixels

</emphasis>
 methods to access and modify the color content 
	of the individual pixels that make up an image.

</item>




</list>




<para id="p1016">
<emphasis id="strong1016" effect="bold">
The organization of image information

</emphasis>
</para>




<para id="p1017">
In that lesson, I also explained how the color and transparency information 
for an image is stored in files and in the computer's memory. That included 
topics such as:

</para>




<list id="ul1007" list-type="bulleted">

	

<item id="li1024">
Vector graphics versus bitmap graphics

</item>


	

<item id="li1025">
Width, height, and color depth

</item>


	

<item id="li1026">
The RGB and ARGB color models

</item>


	

<item id="li1027">
The effect of the transparency or alpha value 

<emphasis id="em1004" effect="italics">
(total and partial 
	opacity or transparency)

</emphasis>
</item>


	

<item id="li1028">
Bitmap image file formats 

<emphasis id="em1005" effect="italics">
(GIF, JPEG, PNG)

</emphasis>
</item>




</list>




<para id="p1018">
<emphasis id="strong1017" effect="bold">
Creating a transparent background

</emphasis>
</para>




<para id="p1019">
In this lesson, I will show you how to convert an image with a constant color 
background 

<emphasis id="em1006" effect="italics">
(such as the top image in Figure 1)

</emphasis>
 into an image with a 
transparent background 

<emphasis id="em1007" effect="italics">
(such as the bottom image in Figure 1)

</emphasis>
.

</para>




<para id="p1020">
<emphasis id="strong1018" effect="bold">
Chroma key compositing

</emphasis>
</para>




<para id="p1021">
This involves the use of a technique commonly known as 

<emphasis id="em1008" effect="italics">
chroma key 
compositing

</emphasis>
.

</para>




<para id="p1022">
Here is a little of what 

<link id="a1026" url="http://en.wikipedia.org/wiki/Chroma_key">


Wikipedia

</link>

 has to say on the subject:

</para>




<quote id="blockquote1000" display="block">
<para id="p1023">
<emphasis id="em1009" effect="italics">
"Chroma key compositing (or chroma keying) is a technique 
for compositing two images or frames together in which a color (or a small color 
range) from one image is removed (or made transparent), revealing another image 
behind it.

</emphasis>
</para>




<para id="p1024">
<emphasis id="em1010" effect="italics">
This technique is also referred to as color keying, 
colour-separation overlay (CSO; primarily by the BBC[1]), greenscreen, and 
bluescreen.

</emphasis>
</para>




<para id="p1025">
<emphasis id="em1011" effect="italics">
It is commonly used for weather forecast broadcasts, 
wherein the presenter appears to be standing in front of a large map, but in the 
studio it is actually a large blue or green background. The meteorologist stands 
in front of a 

</emphasis>
<emphasis id="em1012" effect="italics">
bluescreen, and then different weather maps are added on 
those parts in the image where the color is blue."

</emphasis>
</para>


</quote>




<para id="p1026">
<emphasis id="strong1019" effect="bold">
Commonly used in computer graphics

</emphasis>
</para>




<para id="p1027">
The process is also commonly used in computer graphics where it is desired to 
overlay one image onto another without letting the background color of the front 
image show.

</para>




<para id="p1028">
That is the intent of this lesson, and the process developed here will be 
used in a future lesson on animation.

</para>




</section>
<section id="h11003">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>




<para id="p1029">
In this lesson, I will show you to start with an image having a solid 
background color, such as the top image in Figure 1 and how to convert that 
image into one with a transparent background, such as the bottom image in Figure 
1.

</para>





<figure id="figure1000" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_1" effect="bold">
</emphasis>
Screen output for the program named   ChromaKey01.
</title>





<media id="media1000" alt="Missing Image" display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/as0134.jpg" width="169" height="558"/>
</media>




<caption>Screen output for the program named   ChromaKey01.</caption>
</figure>







<para id="p1030">
<emphasis id="strong1020" effect="bold">
A yellow Canvas object

</emphasis>
</para>




<para id="p1031">
Both images in Figure 1 are displayed on the same yellow 

<emphasis id="strong1021" effect="bold">
Canvas

</emphasis>
 
object.

</para>




<para id="p1032">
The color of the canvas is hidden by the magenta background color of the top 
image. However, that magenta background is totally transparent in the bottom 
image, allowing the yellow color of the canvas to show through.

</para>






</section>
<section id="h11004">
<title>
 

<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>






<para id="p1033">
<emphasis id="strong1022" effect="bold">
The MXML file

</emphasis>
</para>




<para id="p1034">
The MXML file, shown in Listing 8, is no different from MXML files used to 
launch ActionScript programs in earlier lessons. Therefore, no explanation of 
the MXML code is warranted.

</para>




<para id="p1035">
<emphasis id="strong1023" effect="bold">
Will explain in fragments

</emphasis>
</para>




<para id="p1036">
I will explain the ActionScript code for the program named 

<emphasis id="strong1024" effect="bold">

ChromaKey01

</emphasis>
 in fragments. A complete listing of the code for the 
ActionScript class named


<emphasis id="strong1025" effect="bold">
Driver

</emphasis>
 is provided in Listing 7.

</para>




<para id="p1037">
<emphasis id="strong1026" effect="bold">
The processChromaKey method

</emphasis>
</para>




<para id="p1038">
This program illustrates the use of a custom method named 

<emphasis id="strong1027" effect="bold">

processChromaKey

</emphasis>
. This method scans all of the pixels in an incoming 
bitmap and identifies those pixels with a color of pure magenta. The alpha 
values for the magenta pixels are set to zero to make them transparent. Then the 
bitmap is modified accordingly.

</para>




<para id="p1039">
The method can easily be modified to accommodate an image background of any 
solid color such as green or blue. Note however, that magenta is commonly used 
in computer graphics, and is often referred to as 

<emphasis id="em1013" effect="italics">
"magic pink."

</emphasis>
</para>




<para id="p1040">
<emphasis id="strong1028" effect="bold">
Beginning of the ActionScript class named Driver

</emphasis>
</para>




<para id="p1041">
The Flex code in Listing 8 instantiates a new object of the class named


<emphasis id="strong1029" effect="bold">
Driver

</emphasis>
 and adds that object to the display list as a child of 
the 

<emphasis id="strong1030" effect="bold">
Application

</emphasis>
 container.

</para>




<para id="p1042">
The ActionScript code for the class named 

<emphasis id="strong1031" effect="bold">
Driver

</emphasis>
 begins in Listing 1.

</para>






<example id="listing1000" type="listing">
<label>Listing</label>


  


  

<title>
<emphasis id="Listing_1" effect="bold">
</emphasis>
Beginning of the    class named Driver.
</title>


    


      


      

<code id="pre1000" display="block">
package CustomClasses{
  import flash.display.Bitmap;
  import flash.display.BitmapData;
  import flash.geom.Rectangle;
  import flash.utils.ByteArray;
  import mx.containers.Canvas;
  import mx.controls.Image;
  import mx.events.FlexEvent;
  //====================================================//
  
  public class Driver extends Canvas {
    private var origImage:Image = new Image();

</code>


      

</example>

    


  










<para id="p1043">
<emphasis id="strong1032" effect="bold">
Extend the Flex Canvas class

</emphasis>
</para>




<para id="p1044">
Note that the 

<emphasis id="strong1033" effect="bold">
Driver

</emphasis>
 class extends the Flex 

<emphasis id="strong1034" effect="bold">
Canvas

</emphasis>
 
class, thus making it possible to add other objects as children of an object of 
the 

<emphasis id="strong1035" effect="bold">
Driver

</emphasis>
 class.

</para>




<para id="p1045">
<emphasis id="strong1036" effect="bold">
Another reason for extending the Canvas class

</emphasis>
</para>




<para id="p1046">
I could have accomplished that purpose by extending any number of Flex 
container classes. However, an important characteristic of the 

<emphasis id="strong1037" effect="bold">

Canvas

</emphasis>
 class for this application is the ability to specify the 
physical locations of the child objects in absolute coordinates. Few if any 
other Flex containers allow you to do that,

</para>




<para id="p1047">
<emphasis id="strong1038" effect="bold">
The constructor

</emphasis>
</para>




<para id="p1048">
The constructor for the 

<emphasis id="strong1039" effect="bold">
Driver

</emphasis>
 class is shown in its 
entirety in Listing 2.

</para>




<example id="listing1001" type="listing">
<label>Listing</label>


  


  

<title>
<emphasis id="Listing_2" effect="bold">
</emphasis>
The constructor    for the class named Driver.
</title>


    


      


      

<code id="pre1001" display="block">    public function Driver(){//constructor
      //Make this Canvas visible with a yellow background.
      setStyle("backgroundColor",0xFFFF00);
      setStyle("backgroundAlpha",1.0);

      //Load the file mage and embed it in the swf file.
      //Note the slash that is required by FlashDevelop.
      [Embed("/dancer.png")]
      var img:Class;
      origImage.load(img);

      //Register a CREATION_COMPLETE listener
      this.addEventListener(FlexEvent.CREATION_COMPLETE,
                                         completeHandler);
    } //end constructor
</code>


      

</example>

    


  









<para id="p1049">
<emphasis id="strong1040" effect="bold">
Make the canvas visible

</emphasis>
</para>




<para id="p1050">
The constructor begins by setting two style properties on the 

<emphasis id="strong1041" effect="bold">
Canvas

</emphasis>
 
object to make it yellow and opaque.

</para>




<para id="p1051">
You learned how to set styles on objects in ActionScript code as early as the 
lesson titled 

<emphasis id="strong1042" effect="bold">
What is OOP and Why Should I Care?

</emphasis>
</para>




<para id="p1052">
<emphasis id="strong1043" effect="bold">
Load the image from the file

</emphasis>
</para>




<para id="p1053">
Then the constructor loads the image from the image file named 

<emphasis id="strong1044" effect="bold">

dancer.png

</emphasis>
 and embeds it in the swf file. You learned how to do this as 
early as the lesson titled 

<emphasis id="strong1045" effect="bold">
Inheritance - The Big Picture.

</emphasis>
</para>




<para id="p1054">
<emphasis id="strong1046" effect="bold">
No lossy compression allowed

</emphasis>
</para>




<para id="p1055">
Note that this program uses an image from a 

<emphasis id="strong1047" effect="bold">
<emphasis id="em1014" effect="italics">
png

</emphasis>
</emphasis>
 
file for demonstration purposes.

</para>




<para id="p1056">
Unlike a 

<emphasis id="strong1048" effect="bold">
<emphasis id="em1015" effect="italics">
jpg

</emphasis>
</emphasis>
 file, 

<emphasis id="em1016" effect="italics">
(which uses lossy compression)

</emphasis>
 the colors that 
you extract from a png file are exactly the colors that were stored in the png 
file. That is a requirement for a chroma key process that is based on an exact 
color match.

</para>




<para id="p1057">
<emphasis id="strong1049" effect="bold">
An unusual requirement

</emphasis>
</para>




<para id="p1058">
There is an unusual requirement shown in Listing 2 that you haven't seen in 
the earlier lessons in this series.

</para>




<para id="p1059">
This is the first lesson that I have written explaining a program that loaded 
and embedded an image file where the program was developed using 

<emphasis id="strong1050" effect="bold">

FlashDevelop

</emphasis>
 

<emphasis id="em1017" effect="italics">
(see 

<link id="a1027" target-id="Publication_issues">

Publication Issues

</link>

 
below).

</emphasis>
</para>




<para id="p1060">
<emphasis id="strong1051" effect="bold">
File organization

</emphasis>
</para>




<para id="p1061">
In this case, the image file was placed in the same folder as the MXML 
file. Note that it was necessary for me to precede the name of the image file in 
Listing 2 with a slash character. I have not previously encountered that 
requirement when using Flex Builder 3. 

<emphasis id="em1018" effect="italics">
(Note however that inclusion of the 
slash character in a Flex Builder 3 project doesn't seem to cause a problem.)

</emphasis>
</para>




<para id="p1062">
<emphasis id="strong1052" effect="bold">
Register a CREATION_COMPLETE listener

</emphasis>
</para>




<para id="p1063">
Finally, Listing 2 registers an event handler to handle CREATION_COMPLETE 
events fired by the 

<emphasis id="strong1053" effect="bold">
Canvas

</emphasis>
 object.

</para>




<para id="p1064">
You learned how and why to use a CREATION_COMPLETE listener in the earlier 
lesson titled 

<emphasis id="strong1054" effect="bold">
Encapsulation - The Big Picture.

</emphasis>
</para>




<para id="p1065">
<emphasis id="strong1055" effect="bold">
The CREATION_COMPLETE event handler

</emphasis>
</para>




<para id="p1066">
The CREATION_COMPLETE event handler is shown in its entirety in Listing 3. 
This method is executed when the 

<emphasis id="strong1056" effect="bold">
Canvas

</emphasis>
 object has been fully 
created.

</para>






<example id="listing1002" type="listing">
<label>Listing</label>


  


  

<title>
<emphasis id="Listing_3" effect="bold">
</emphasis>
The    CREATION_COMPLETE event handler.
</title>


    


      


      

<code id="pre1002" display="block">    private function completeHandler(
                          event:mx.events.FlexEvent):void{
      //Get and save a reference to a Bitmap object
      // containing the contents of the origImage file.
      var origBitMap:Bitmap = Bitmap(origImage.content);
      
      //Set the width and height of the Canvas object 
      // based on the size of the origBitMap bitmap. Make
      // ten pixels wider and twice as high as the 
      // bitmap.
      this.width = origBitMap.width + 10;
      this.height = 2*origBitMap.height;

      //Add the original image to the Canvas object at
      // the default location of 0,0.
      this.addChild(origImage);
      
      //Clone the origBitMap to create a
      // duplicate.
      var dupBitMap:Bitmap = new Bitmap(
                           origBitMap.bitmapData.clone());
                           
      //Put the dupBitMap in a new Image object and
      // place it on the canvas below the original image.
      dupBitMap.x = 0;
      dupBitMap.y = origBitMap.height;
      
      var newImage:Image = new Image();
      newImage.addChild(dupBitMap);
      this.addChild(newImage);
      
      //Set the alpha value for all pixels in the new
      // image with a color of pure magenta to zero.
      processChromaKey(dupBitMap);

    } //end completeHandler
</code>


      

</example>

    


  









<para id="p1067">
<emphasis id="strong1057" effect="bold">
The call to the method named processChromaKey

</emphasis>
</para>


	

<para id="p1068">
With the exception of the call to the method named 

<emphasis id="strong1058" effect="bold">

	processChromaKey

</emphasis>
 at the end of Listing 3, I explained everything in 
	Listing 3 in the earlier lesson titled 

<emphasis id="strong1059" effect="bold">
Fundamentals of Image Pixel 
	Processing.

</emphasis>
 I won't waste your time by repeating that explanation here.

</para>




<para id="p1069">
<emphasis id="strong1060" effect="bold">
Beginning of the 

<emphasis id="em1019" effect="italics">
processChromaKey

</emphasis>
 method

</emphasis>
</para>




<para id="p1070">
The 

<emphasis id="strong1061" effect="bold">
processChromaKey

</emphasis>
 method begins in Listing 4.

</para>






<example id="listing1003" type="listing">
<label>Listing</label>


  


  

<title>
<emphasis id="Listing_4" effect="bold">
</emphasis>
Beginning of the     processChromaKey  method.
</title>


    


      


      

<code id="pre1003" display="block">    private function processChromaKey(bitmap:Bitmap):void{
      //Get the BitmapData object.
      var bitmapData:BitmapData = bitmap.bitmapData;

      //Populate a one-dimensional byte array of pixel
      // data from the bitmapData object. Note that the
      // pixel data format is ARGB.
      var rawBytes:ByteArray = new ByteArray();
      rawBytes = bitmapData.getPixels(new Rectangle(
               0,0,bitmapData.width,bitmapData.height));
      
</code>


      

</example>

    


  









<para id="p1071">
<emphasis id="strong1062" effect="bold">
A reference to a Bitmap object

</emphasis>
</para>




<para id="p1072">
This method receives a reference to a 

<emphasis id="strong1063" effect="bold">
Bitmap

</emphasis>
 object as an 
incoming parameter.

</para>




<para id="p1073">
It identifies all of the pixels in the incoming bitmap with a pure magenta 
color and sets the alpha bytes for those pixels to a value of zero.

</para>




<para id="p1074">
This causes those pixels to become transparent as shown by the bottom image 
in Figure 1.

</para>




<para id="p1075">
<emphasis id="strong1064" effect="bold">
Nothing new in Listing 4

</emphasis>
</para>

 



<para id="p1076">
I explained all of the code in Listing 4 in the earlier lesson titled 


<emphasis id="strong1065" effect="bold">
Fundamentals of Image Pixel Processing.

</emphasis>
</para>




<para id="p1077">
<emphasis id="strong1066" effect="bold">
The ByteArray object is populated with 
pixel data

</emphasis>
</para>




<para id="p1078">
When the 

<emphasis id="strong1067" effect="bold">
getPixels

</emphasis>
 method returns in Listing 4, the pixels 
from a rectangular region that encompasses the entire bitmap are stored in the


<emphasis id="strong1068" effect="bold">
ByteArray

</emphasis>
 object referred to by 

<emphasis id="strong1069" effect="bold">
rawBytes

</emphasis>
.

</para>




<para id="p1079">
<emphasis id="strong1070" effect="bold">
The organization of the pixel 
data

</emphasis>
</para>




<para id="p1080">
The array is populated with the bitmap pixel data from the rectangular region 
on a row by row basis.

</para>




<para id="p1081">
The first four bytes in the array belong to the pixel in the upper-left 
corner of the rectangular region. The next four bytes belong to the pixel 
immediately to the right of that one, and so on.

</para>




<para id="p1082">
<emphasis id="strong1071" effect="bold">
Four bytes per pixel

</emphasis>
</para>




<para id="p1083">
Each set of four bytes represents one pixel in ARGB format. In other words, 
the first byte in the four-byte group is the alpha byte. That byte is followed 
by the red byte, the green byte, and the blue byte in that order.

</para>




<para id="p1084">
This information is critical when time comes to use the data in the array to 
modify the bitmap data.

</para>




<para id="p1085">
<emphasis id="strong1072" effect="bold">
Set selected alpha values to zero

</emphasis>
</para>




<para id="p1086">
The code in Listing 5 iterates through the entire set of image pixels and 
sets selected alpha values to zero.

</para>






<example id="listing1004" type="listing">
<label>Listing</label>


  


  

<title>
<emphasis id="Listing_5" effect="bold">
</emphasis>
Set selected    alpha values to zero.
</title>


    


      


      

<code id="pre1004" display="block">      //Declare working variables. Note that there is
      // no requirement to deal with the green color
      // value in this case of testing for magenta.
      var cnt:uint;
      var red:uint;
      var green:uint;
      var blue:uint;
      
      for (cnt = 0; cnt &lt; rawBytes.length; cnt += 4) {
        //alpha is in rawBytes[cnt]
        red = rawBytes[cnt + 1];
        green = rawBytes[cnt + 2];
        blue = rawBytes[cnt + 3];
        
        if ((red == 255) &amp;&amp; (green == 0 ) &amp;&amp; 
                                          (blue == 255)) {
          //The color is pure magenta. Set the value
          // of the alpha byte to zero.
          rawBytes[cnt] = 0;
        }//end if
      }//end for loop      
</code>


      

</example>

    


  









<para id="p1087">
<emphasis id="strong1073" effect="bold">
A for loop

</emphasis>
</para>




<para id="p1088">
After declaring some working variables, Listing 5 iterates through all of the 
data in the 

<emphasis id="strong1074" effect="bold">
ByteArray

</emphasis>
 object. It extracts the red, green, and blue 
color bytes from each four-byte group and tests to see if red and blue are both 
set to full intensity with a value of 255 and green is set to zero.

</para>




<para id="p1089">
If true, this is interpreted to match the magenta background color, and the 
value of the alpha byte in that four-bit group is set to zero.

</para>




<para id="p1090">
<emphasis id="strong1075" effect="bold">
Store the modified pixel data in the bitmap

</emphasis>
</para>




<para id="p1091">
Listing 6 copies the modified pixel data from the 

<emphasis id="strong1076" effect="bold">
ByteArray

</emphasis>
 object back into 
the bitmap, overwriting the pixel data previously stored in the bitmap.

</para>






<example id="listing1005" type="listing">
<label>Listing</label>


  


  

<title>
<emphasis id="Listing_6" effect="bold">
</emphasis>
Store    the modified pixel data in the bitmap.
</title>


    


      


      

<code id="pre1005" display="block">      //Put the modified pixels back into the bitmapData
      // object.
      rawBytes.position = 0;//this is critical
      bitmapData.setPixels(new Rectangle(
                0,0,bitmapData.width,bitmapData.height),
                rawBytes);
    
    } //end processChromaKey method
    //--------------------------------------------------//
        
  } //end class
} //end package</code>


      

</example>

    


  









<para id="p1092">
I explained all of the code in Listing 6 in the earlier lesson titled 


<emphasis id="strong1077" effect="bold">
Fundamentals of Image Pixel Processing.

</emphasis>
</para>




<para id="p1093">
<emphasis id="strong1078" effect="bold">
The end of the class

</emphasis>
</para>




<para id="p1094">
Listing 6 also signals the end of the method, the end of the class, the end 
of the package, and the end of the program.

</para>






</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>






<para id="p1095">
I encourage you to


<link id="a1028" target-id="Click">

run

</link>

 this program from the web. 
Then copy the code from Listing 7 and Listing 8. Use that code to create a new 
project. Compile and run the project. Experiment with the code, making changes, 
and observing the results of your changes. Make certain that you can explain why 
your changes behave as they do. 

</para>




</section>
<section id="h11006">
<title>
<emphasis id="Resources" effect="bold">

Resources

</emphasis>


</title>




<para id="p1096">
I will publish a list containing links to ActionScript resources 
as a separate document. Search for ActionScript Resources in the 
Connexions search box.

</para>






</section>
<section id="h11007">
<title>
 

<emphasis id="Complete_program_listing" effect="bold">

Complete program listings

</emphasis>


</title>






<para id="p1097">
Complete listings for the program discussed in this lesson are provided in 
Listing 7 and Listing 8 below.

</para>






<example id="listing1006" type="listing">
<label>Listing</label>


  


  

<title>
<emphasis id="Listing_7" effect="bold">
</emphasis>
Listing of the    class named Driver.
</title>


    


      


      

<code id="pre1006" display="block">/*Project ChromaKey01
This project scans all of the pixels in an image to 
identify those pixels with a color of pure magenta. The
alpha value for those pixels is set to zero to make them
transparent.
*********************************************************/
package CustomClasses{
  import flash.display.Bitmap;
  import flash.display.BitmapData;
  import flash.geom.Rectangle;
  import flash.utils.ByteArray;
  import mx.containers.Canvas;
  import mx.controls.Image;
  import mx.events.FlexEvent;
  //====================================================//
  
  public class Driver extends Canvas {
    private var origImage:Image = new Image();
    
    public function Driver(){//constructor
      //Make this Canvas visible with a yellow background.
      setStyle("backgroundColor",0xFFFF00);
      setStyle("backgroundAlpha",1.0);

      //Load the origImage and embed it in the swf file.
      //Note the slash that is required by FlashDevelop.
      [Embed("/dancer.png")]
      var img:Class;
      origImage.load(img);

      //Register a CREATION_COMPLETE listener
      this.addEventListener(FlexEvent.CREATION_COMPLETE,
                                         completeHandler);
    } //end constructor
    //--------------------------------------------------//

    //This handler method is executed when the Canvas has
    // been fully created.
    private function completeHandler(
                          event:mx.events.FlexEvent):void{
      //Get and save a reference to a Bitmap object
      // containing the contents of the origImage file.
      var origBitMap:Bitmap = Bitmap(origImage.content);
      
      //Set the width and height of the Canvas object 
      // based on the size of the origBitMap bitmap. Make
      // ten pixels wider and twice as high as the 
      // bitmap.
      this.width = origBitMap.width + 10;
      this.height = 2*origBitMap.height;

      //Add the original image to the Canvas object at
      // the default location of 0,0.
      this.addChild(origImage);
      
      //Clone the origBitMap to create a
      // duplicate.
      var dupBitMap:Bitmap = new Bitmap(
                           origBitMap.bitmapData.clone());
                           
      //Put the dupBitMap in a new Image object and
      // place it on the canvas below the original image.
      dupBitMap.x = 0;
      dupBitMap.y = origBitMap.height;
      
      var newImage:Image = new Image();
      newImage.addChild(dupBitMap);
      this.addChild(newImage);
      
      //Set the alpha value for all pixels in the new
      // image with a color of pure magenta to zero.
      processChromaKey(dupBitMap);

    } //end completeHandler
    //--------------------------------------------------//
    
    //This method identifies all of the pixels in the
    // incoming bitmap with a pure magenta color and sets
    // the alpha bytes for those pixels to a value of
    // zero.
    private function processChromaKey(bitmap:Bitmap):void{
      //Get the BitmapData object.
      var bitmapData:BitmapData = bitmap.bitmapData;

      //Populate a one-dimensional byte array of pixel
      // data from the bitmapData object. Note that the
      // pixel data format is ARGB.
      var rawBytes:ByteArray = new ByteArray();
      rawBytes = bitmapData.getPixels(new Rectangle(
               0,0,bitmapData.width,bitmapData.height));
      
      //Declare working variables. Note that there is
      // no requirement to deal with the green color
      // value in this case of testing for magenta.
      var cnt:uint;
      var red:uint;
      var green:uint;
      var blue:uint;
      
      for (cnt = 0; cnt &lt; rawBytes.length; cnt += 4) {
        //alpha is in rawBytes[cnt]
        red = rawBytes[cnt + 1];
        green = rawBytes[cnt + 2];
        blue = rawBytes[cnt + 3];
        
        if ((red == 255) &amp;&amp; (green == 0 ) &amp;&amp; 
                                          (blue == 255)) {
          //The color is pure magenta. Set the value
          // of the alpha byte to zero.
          rawBytes[cnt] = 0;
        }//end if

      }//end for loop
      
      //Put the modified pixels back into the bitmapData
      // object.
      rawBytes.position = 0;//this is critical
      bitmapData.setPixels(new Rectangle(
                0,0,bitmapData.width,bitmapData.height),
                rawBytes);
    
    } //end processChromaKey method
    //--------------------------------------------------//
        
  } //end class
} //end package</code>


      

</example>

    


  










<para id="p1098">
</para>






<example id="listing1007" type="listing">
<label>Listing</label>


  


  

<title>
<emphasis id="Listing_8" effect="bold">
</emphasis>
Listing of the    MXML file.
</title>


    


      


      

<code id="pre1007" display="block">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!--
Project ChromaKey01
This project scans all of the pixels in an image to 
identify those pixels with a color of pure magenta. The
alpha value for those pixels is set to zero to make them
transparent.
--&gt;

&lt;mx:Application 
  xmlns:mx="http://www.adobe.com/2006/mxml" 
  xmlns:cc="CustomClasses.*"&gt;
  
  &lt;cc:Driver/&gt;

&lt;/mx:Application&gt;</code>


      

</example>

    


  









</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


<para id="p1099">
This section contains a variety of miscellaneous materials.

</para>







<note id="note1002" type="miscellaneous">







<emphasis id="strong1079" effect="bold">
Housekeeping material

</emphasis>



<list id="ul1008" list-type="bulleted">



<item id="li1029">
Module name: Using Chroma Key Compositing to Create Transparent Backgrounds

</item>




<item id="li1030">
Files:

<list id="ul1009" list-type="bulleted">



<item id="li1031">
ActionScript0134\ActionScript0134.htm

</item>




<item id="li1032">
ActionScript0134\Connexions\ActionScriptXhtml0134.htm

</item>




</list>




</item>




</list>




</note>









<note id="note1003" type="miscellaneous">




<emphasis id="strong1080" effect="bold">
PDF disclaimer:

</emphasis>
 Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.


</note>











<note id="note1004" type="miscellaneous">




<emphasis id="strong1081" effect="bold">
<emphasis id="Publication_issues" effect="bold">

Publication issues

</emphasis>

:

</emphasis>
 This project was originally 
	developed using the free open-source
	

<link id="a1029" url="http://www.flashdevelop.org/wikidocs/index.php?title=Main_Page">


	FlashDevelop

</link>

 development tool. However, because of limitations of the 
	Connexions web site, it was necessary for me to convert the project to a 
	Flex Builder 3 project to make it possible for you to 

<link id="a1030" target-id="Click">

run

</link>

 
	the program from this Connexions module.


</note>









<para id="p1100">
-end- 

</para>





</section>
</content>




</document>