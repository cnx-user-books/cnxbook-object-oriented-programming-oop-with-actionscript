<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Combining Sound with Motion and Image Animation</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m34498</md:content-id>
  <md:title>Combining Sound with Motion and Image Animation</md:title>
  <md:abstract>Learn to combine sounds, motion animation, image animation, and other interesting effects in a Flash movie using ActionScript 3.</md:abstract>
  <md:uuid>4ff3aa5d-c429-434d-ad6d-8808c4d80ae1</md:uuid>
</metadata>

<content>



















<note id="note1000" type="miscellaneous">





	

<emphasis id="Click" effect="bold">

Click

</emphasis>

 

<link id="a1000" url="LighteningStorm01.html">

LighteningStorm01

</link>


to run the ActionScript program from this lesson. This program produces sound in 
	addition to graphics. 

<emphasis id="em1000" effect="italics">

(Click the "Back" button in your browser
to return to this page.)

</emphasis>



</note>







<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1001" target-id="Preface">

Preface

</link>


<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1002" target-id="General">

General

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1003" list-type="bulleted">

				

<item id="li1003">
<link id="a1004" target-id="Figures">

Figures

</link>


</item>


				

<item id="li1004">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>


			

</list>


			

</item>


		

</list>


		

</item>


		

<item id="li1005">
<link id="a1006" target-id="Supplemental_material">

Supplemental material

</link>


</item>


	

</list>


	

</item>


	

<item id="li1006">
<link id="a1007" target-id="General_background_information">

General background information

</link>


</item>


	

<item id="li1007">
<link id="a1008" target-id="Preview">

Preview

</link>


</item>


	

<item id="li1008">
<link id="a1009" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1004" list-type="bulleted">

		

<item id="li1009">
<link id="a1010" target-id="The_MXML_code">

The MXML code

</link>


</item>


		

<item id="li1010">
<link id="a1011" target-id="The_ActionScript_code">

The ActionScript code

</link>


</item>


	

</list>


	

</item>


	

<item id="li1011">
<link id="a1012" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1012">
<link id="a1013" target-id="Resources">

Resources

</link>


</item>


	

<item id="li1013">
<link id="a1014" target-id="Complete_program_listing">

Complete program listings

</link>


</item>


	

<item id="li1014">
<link id="a1015" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>






</section>
<section id="h11001">
<title>
 

<emphasis id="Preface" effect="bold">


</emphasis>

Preface

</title>






<section id="h21000">
<title>
 

<emphasis id="General" effect="bold">

General

</emphasis>


</title>









<para id="p1000">
This tutorial lesson is part of a series of lessons dedicated to 
object-oriented programming 

<emphasis id="em1001" effect="italics">
(OOP)

</emphasis>
 with ActionScript.

</para>




<para id="p1001">
The project that I will present and explain in this lesson is the culmination 
of several previous lessons dealing with animation, sound, transparency, mouse 
events, chroma key, etc.

</para>


	


<note id="note1001" type="miscellaneous">





	All references to ActionScript in this lesson are references to version 3.0 or later.


</note>




	


<para id="p1002">
<emphasis id="strong1000" effect="bold">
Several ways to create and launch ActionScript programs

</emphasis>
</para>




<para id="p1003">
There are several ways to create and launch programs written in the 
ActionScript programming language. Many of the lessons in this series will 
use Adobe Flex as the launch pad for the sample ActionScript programs.

</para>




<para id="p1004">
An earlier lesson titled 


<emphasis id="strong1001" effect="bold">
The Default 
Application Container

</emphasis>
 provided information on how to get started programming 
with Adobe's Flex Builder 3. The lesson titled


<emphasis id="strong1002" effect="bold">
Using Flex 3 in 
a Flex 4 World

</emphasis>
 was added later to accommodate the release of Flash Builder 
4. 

<emphasis id="em1002" effect="italics">

(See 

<link id="a1016" url="http://www.dickbaldwin.com/tocFlex.htm">

Baldwin's Flex programming 
website

</link>

.)

</emphasis>
 You should study those lessons before embarking on the 
lessons in this series.

</para>




<para id="p1005">
<emphasis id="strong1003" effect="bold">
Some understanding of Flex MXML will be required

</emphasis>
</para>






<para id="p1006">
I also recommend that you study all of the lessons on


<link id="a1017" url="http://www.dickbaldwin.com/tocFlex.htm">

Baldwin's Flex programming 
website

</link>

 in parallel with your study of these ActionScript lessons. 
Eventually you will probably need to understand both ActionScript and Flex and 
the relationships that exist between them in order to become a successful 
ActionScript programmer. 

</para>




<para id="p1007">
<emphasis id="strong1004" effect="bold">
Will emphasize ActionScript code

</emphasis>
</para>




<para id="p1008">
It is often possible to use either ActionScript code or Flex MXML code to 
achieve the same result. Insofar as this series of lessons is concerned, 
the emphasis will be on ActionScript code even in those cases where Flex MXML 
code may be a suitable alternative.

</para>




</section>
<section id="h21001">
<title>
 

<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>




<para id="p1009">
 I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.

</para>




<section id="h31000">
<title>
 

<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>




<list id="ul1005" list-type="bulleted">

	

<item id="li1015">
<link id="a1018" target-id="Figure_1">

Figure 1

</link>

. LighteningStorm01 at startup. 

</item>


	

<item id="li1016">
<link id="a1019" target-id="Figure_2">

Figure 2

</link>

. Visual output produced by clicking the 
	button. 

</item>


	

<item id="li1017">
<link id="a1020" target-id="Figure_3">

Figure 3

</link>

. Project file structure for 
	LighteningStorm01. 

</item>


	

<item id="li1018">
<link id="a1021" target-id="Figure_4">

Figure 4

</link>

. The image named normalsky.jpg.

</item>


	

<item id="li1019">
<link id="a1022" target-id="Figure_5">

Figure 5

</link>

. The image named flippedsky.jpg. 

</item>


	

<item id="li1020">
<link id="a1023" target-id="Figure_6">

Figure 6

</link>

. The tree image.

</item>




</list>




</section>
<section id="h31001">
<title>
 

<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1006" list-type="bulleted">

	

<item id="li1021">
<link id="a1024" target-id="Listing_1">

Listing 1

</link>

. Beginning of the Driver class. 

</item>


	

<item id="li1022">
<link id="a1025" target-id="Listing_2">

Listing 2

</link>

. Beginning of the constructor for the 
	Driver class. 

</item>


	

<item id="li1023">
<link id="a1026" target-id="Listing_3">

Listing 3

</link>

. The remainder of the constructor. 

</item>


	

<item id="li1024">
<link id="a1027" target-id="Listing_4">

Listing 4

</link>

. The CREATION_COMPLETE event handler. 

</item>


	

<item id="li1025">
<link id="a1028" target-id="Listing_5">

Listing 5

</link>

. Beginning of the TIMER event 
	handler. 

</item>


	

<item id="li1026">
<link id="a1029" target-id="Listing_6">

Listing 6

</link>

. Controlling the motion of the moon. 

</item>


	

<item id="li1027">
<link id="a1030" target-id="Listing_7">

Listing 7

</link>

. The method named 
	processBackgroundColor. 

</item>


	

<item id="li1028">
<link id="a1031" target-id="Listing_8">

Listing 8

</link>

. Beginning of the method named 
	makeTheCloudsMove. 

</item>


	

<item id="li1029">
<link id="a1032" target-id="Listing_9">

Listing 9

</link>

. Compute new alpha value for the 
	normal sky image. 

</item>


	

<item id="li1030">
<link id="a1033" target-id="Listing_10">

Listing 10

</link>

. Compute new alpha value for the 
	flipped sky image. 

</item>


	

<item id="li1031">
<link id="a1034" target-id="Listing_11">

Listing 11

</link>

. Apply the new alpha values to both 
	sky images. 

</item>


	

<item id="li1032">
<link id="a1035" target-id="Listing_12">

Listing 12

</link>

. The CLICK event handler for the 
	button. 

</item>


	

<item id="li1033">
<link id="a1036" target-id="Listing_13">

Listing 13

</link>

. The method named flashLightening. 

</item>


	

<item id="li1034">
<link id="a1037" target-id="Listing_14">

Listing 14

</link>

. The method named drawLightening. 

</item>


	

<item id="li1035">
<link id="a1038" target-id="Listing_15">

Listing 15

</link>

. The method named 
	soundCompleteHandler. 

</item>


	

<item id="li1036">
<link id="a1039" target-id="Listing_16">

Listing 16

</link>

. Code for Main.mxml. 

</item>


	

<item id="li1037">
<link id="a1040" target-id="Listing_17">

Listing 17

</link>

. Source code for the class named 
	Driver. 

</item>




</list>




</section>
</section>
<section id="h21002">
<title>
 

<emphasis id="Supplemental_material" effect="bold">

Supplemental material

</emphasis>


</title>




<para id="p1010">
 I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials. You will find a consolidated index at


<link id="a1041" url="http://www.dickbaldwin.com/toc.htm">


www.DickBaldwin.com

</link>

.

</para>




</section>
</section>
<section id="h11002">
<title>
 

<emphasis id="General_background_information" effect="bold">

General background 
information

</emphasis>


</title>




<para id="p1011">
<emphasis id="strong1005" effect="bold">
Things you have learned

</emphasis>
</para>




<para id="p1012">
You learned about event handling, bitmap basics, the fundamentals of image 
pixel processing, and using chroma key compositing to create transparent 
backgrounds in earlier lessons in this series.

</para>




<para id="p1013">
You also learned about drawing with the 

<emphasis id="strong1006" effect="bold">
Graphics

</emphasis>
 class, the fundamentals of 
animation and using sound in ActionScript in earlier lessons as well.

</para>




<para id="p1014">
In the lesson titled 

<emphasis id="strong1007" effect="bold">
Animation Fundamentals

</emphasis>
 I told you that 
I refer to any program code that causes visual images to 

<emphasis id="em1003" effect="italics">
change over time

</emphasis>
 to 
be animation.

</para>




<para id="p1015">
<emphasis id="strong1008" effect="bold">
Other types of animation

</emphasis>
</para>




<para id="p1016">
Although we commonly think of animation in terms of images that appear to 
move over time, there are many other valid forms of 
animation as well. For example, if the color of an image changes over time, that 
is animation. If the transparency of an image changes over time, that is 
animation. If graphic objects appear and then disappear, that is animation.

</para>




<para id="p1017">
In this lesson, I will explain a program that is intended to pull together 
much of what you have already learned and to introduce you to 
this broader view of animation as well.

</para>




</section>
<section id="h11003">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>




<para id="p1018">
<emphasis id="strong1009" effect="bold">
Run the ActionScript program named 
LighteningStorm01

</emphasis>
.

</para>




<para id="p1019">
I recommend that you 

<link id="a1042" target-id="Click">

run

</link>

 the online version of this 
program before continuing.

</para>


	


<note id="note1002" type="miscellaneous">





		If you don't have the proper Flash Player installed, you should be notified 
of that fact and given an opportunity to download and install the Flash Player 
plug-in program.

</note>




	
	

<para id="p1020">
<emphasis id="strong1010" effect="bold">
LighteningStorm01 at startup

</emphasis>
</para>




<para id="p1021">
The program begins by displaying a scene similar to that shown in Figure 1.

</para>






<figure id="figure1000" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_1" effect="bold">
</emphasis>
LighteningStorm01 at startup.
</title>



			

<media id="media1000" alt="Missing image." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/as0170a.jpg" width="511" height="450"/>
</media>




<caption>LighteningStorm01 at startup.</caption>
</figure>







<para id="p1022">
<emphasis id="strong1011" effect="bold">
What you should see

</emphasis>
</para>




<para id="p1023">
When the scene in Figure 1 appears, the clouds should seem to be moving 
slowly. The overall color of the scene should be changing slowly in the 
bluish-green 
range. The moon should be moving very slowly from left to right across the screen. 
You should be able to barely make out a tree in the fog near the bottom center of the image and 
you should be able to hear the wind and the rain. The sound of the rain should 
be continuous while the sound of the wind should come and go on a random 
basis.

</para>




<para id="p1024">
<emphasis id="strong1012" effect="bold">
Output produced by clicking the button

</emphasis>
</para>




<para id="p1025">
When you click the button, the scene should change to one similar to that 
shown in Figure 2.

</para>




<figure id="figure1001" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_2" effect="bold">
</emphasis>
Visual output produced by clicking the button.
</title>



			

<media id="media1001" alt="Missing image." display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/as0170b.jpg" width="511" height="450"/>
</media>




<caption>Visual output produced by clicking the button.</caption>
</figure>







<para id="p1026">
<emphasis id="strong1013" effect="bold">
The sights and sounds of a lightening bolt

</emphasis>
</para>




<para id="p1027">
You should hear a sizzle sound as a lightening bolt comes out of the sky and strikes 
the old tree. The shape of the lightening bolt should be random from one 
button-click to the next. Except for the motion of the moon and the shape of the 
tree, the details of all of the visual elements should change over time on in a 
random fashion.

</para>




<para id="p1028">
<emphasis id="strong1014" effect="bold">
The flash of the lightening

</emphasis>
</para>




<para id="p1029">
The lightening bolt should light up the scene with an eerie yellowish-green glow. 
The overall color of the scene should change slowly and randomly while the sizzle 
sound is playing and the lightening bolt is visible.

</para>




<para id="p1030">
<emphasis id="strong1015" effect="bold">
A loud clap of thunder

</emphasis>
</para>




<para id="p1031">
There should be a loud clap of thunder immediately following the sizzle sound as the 
scene reverts to something similar to that shown in Figure 1.

</para>




<para id="p1032">
<emphasis id="strong1016" effect="bold">
The moon

</emphasis>
</para>




<para id="p1033">
Throughout all of this, the moon should continue to move very slowly from left to 
right across the scene. When it reaches the right edge of the scene, it should 
wrap 
around and start over on the left side.

</para>






</section>
<section id="h11004">
<title>
 

<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>






<para id="p1034">
<emphasis id="strong1017" effect="bold">
The project file structure

</emphasis>
</para>




<para id="p1035">
The final project file structure, captured from the FlashDevelop project 
window, is shown in Figure 3.

</para>




<figure id="figure1002" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_3" effect="bold">
</emphasis>
Project file structure for LighteningStorm01.
</title>



			

<media id="media1002" alt="Missing image." display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/as0170c.jpg" width="246" height="556"/>
</media>




<caption>Project file structure for LighteningStorm01.</caption>
</figure>







<para id="p1036">
As you can see in Figure 3, all of the sound and image files are stored in 
the folder named 

<emphasis id="strong1018" effect="bold">
src

</emphasis>
. In addition, all of the sound files were 
manually copied into the folder named 

<emphasis id="strong1019" effect="bold">
bin

</emphasis>
.

</para>




<para id="p1037">
<emphasis id="strong1020" effect="bold">
Will explain in fragments

</emphasis>
</para>




<para id="p1038">
I will explain the code for 
this program in fragments. Complete listings of the MXML code and the 
ActionScript code are provided in Listing 16 and Listing 17 near the end of the 
lesson.

</para>





<section id="h21003">
<title>
<emphasis id="The_MXML_code" effect="bold">

The MXML code

</emphasis>


</title>




<para id="p1039">
The MXML code is shown in Listing 16. As is often the case in this series of 
lessons, the MXML file is very simple because the program was coded 
almost entirely in ActionScript. The MXML code simply instantiates an object of 
the 

<emphasis id="strong1021" effect="bold">
Driver

</emphasis>
 class. From that point forward, the behavior of the 
program is controlled by ActionScript code.

</para>




</section>
<section id="h21004">
<title>
<emphasis id="The_ActionScript_code" effect="bold">

The ActionScript code

</emphasis>


</title>




<para id="p1040">
<emphasis id="strong1022" effect="bold">
Beginning of the Driver class

</emphasis>
</para>








<para id="p1041">
The 

<emphasis id="strong1023" effect="bold">
Driver

</emphasis>
 class begins in Listing 1.

</para>





<example id="listing1000" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_1" effect="bold">
</emphasis>
Beginning of the Driver class.
</title>







<code id="pre1000" display="block">/*Project LighteningStorm01
This project was developed using FlashDevelop, which
has a couple of requirements that may not exist with
Flex Builder 3 or Flash Builder 4.
1. You must manually copy all mp3 files into the bin
folder.
2. You must insert an extra slash character in the URL
when embedding an image file in the swf file.
*********************************************************/
package CustomClasses{
  import flash.display.Bitmap;
  import flash.display.BitmapData;
  import flash.media.SoundChannel;
  import mx.containers.Canvas;
  import mx.controls.Image;
  import mx.controls.Button;
  import mx.events.FlexEvent;
  import flash.events.TimerEvent;
  import flash.events.MouseEvent;
  import flash.utils.Timer;
  import flash.utils.ByteArray;
  import flash.media.Sound;
  import flash.net.URLRequest;
  import flash.media.SoundChannel;
  import flash.events.Event;
  import flash.geom.Rectangle;

  
  //====================================================//
  
  public class Driver extends Canvas {
    //Extending Canvas makes it possible to position
    // images with absolute coordinates. The default
    // location is 0,0;
    
    private var bkgndColor:uint = 0x005555;
    private var redBkgnd:uint = 0;
    private var greenBkgnd:uint = 128;
    private var blueBkgnd:uint = 128;
    
    private var normalSky:Image = new Image();    
    private var flippedSky:Image = new Image();
  
    private var tree:Image = new Image();
    private var newTreeImage:Image = new Image();
    private var treeBitMap:Bitmap;
    
    private var alphaLim:Number = 0.5;
    private var normalAlpha:Number = alphaLim;
    private var flippedAlpha:Number;
    private var normalAlphaDecreasing:Boolean = true;

    private var canvasObj:Canvas;
    private var timer:Timer = new Timer(35);
    private var loopCntr:uint;
    
    private var lighteningCntr:uint = 0;
    private var lighteningCntrLim:uint = 25;
    private var lighteningStartX:uint;
    private var lighteningStartY:uint;
    private var lighteningEndX:uint;
    private var lighteningEndY:uint;
    
    private var sizzle:Sound;
    private var thunder:Sound;
    private var wind:Sound;
    private var rain:Sound;
    
    private var sizzlePlaying:Boolean = false;
    private var channel:SoundChannel;
    
    private var button:Button;
    
    private var radius:Number = 24;//radius of circle
    private var circleX:Number = 5 * radius;
    private var circleY:Number = 1.5 * radius;
    private var dx:Number = 0.05;</code>




</example>







<para id="p1042">
<emphasis id="strong1024" effect="bold">
Nothing new here

</emphasis>
</para>




<para id="p1043">
There is nothing new in Listing 1, which consists almost entirely of import 
directives and instance variable declarations, so no further explanation of 
Listing 1 should be required. I will simply call your attention to the comments 
regarding the FlashDevelop IDE at the beginning of Listing 1.

</para>




<para id="p1044">
<emphasis id="strong1025" effect="bold">
Beginning of the constructor for the Driver class

</emphasis>
</para>




<para id="p1045">
The constructor for the 

<emphasis id="strong1026" effect="bold">
Driver

</emphasis>
 class begins in Listing 2.

</para>




<example id="listing1001" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_2" effect="bold">
</emphasis>
Beginning of the constructor for the Driver  	class.
</title>







<code id="pre1001" display="block">    public function Driver(){//constructor
      //Make this Canvas visible.
      bkgndColor = (redBkgnd &lt;&lt; 16) + (greenBkgnd &lt;&lt; 8) 
                                              + blueBkgnd;
      setStyle("backgroundColor", bkgndColor);
      setStyle("backgroundAlpha",0.5);
</code>




</example>







<para id="p1046">
<emphasis id="strong1027" effect="bold">
A 24-bit color value

</emphasis>
</para>


	

<para id="p1047">
The first statement in Listing 2 uses the left bitshift operator to 
	construct a 24-bit binary value that will be used to establish the red, 
	green, and blue values for the initial background color of the 

<emphasis id="strong1028" effect="bold">

	Canvas

</emphasis>
 object. Hopefully you are already familiar with binary bit 
	shifting. If not, just Google 

<emphasis id="strong1029" effect="bold">
bitshift operator

</emphasis>
 and you 
	will find a lot of information on the topic. Note that the left bitshift 
	operator is essentially the same in ActionScript, Java, C++, and other 
	programming languages as well.

</para>


	

<para id="p1048">
<emphasis id="strong1030" effect="bold">
Set the initial background color and the transparency

</emphasis>
</para>


	

<para id="p1049">
Then Listing 2 calls the

<emphasis id="strong1031" effect="bold">
 setStyle

</emphasis>
 method twice in 
	succession to set the background color and the transparency of that color 
	for the background of the canvas.

</para>




<para id="p1050">
An examination of the initial values for 

<emphasis id="strong1032" effect="bold">
redBkgnd

</emphasis>
, 

<emphasis id="strong1033" effect="bold">

greenBkgnd

</emphasis>
, and 

<emphasis id="strong1034" effect="bold">
blueBkgnd

</emphasis>
 in Listing 1 indicates that 
the initial background color is a dark shade of cyan with equal contributions of 
green and blue and no red.

</para>




<para id="p1051">
<emphasis id="strong1035" effect="bold">
The transparency of the background color

</emphasis>
</para>




<para id="p1052">
The second call to the 

<emphasis id="strong1036" effect="bold">
setStyle

</emphasis>
 method in Listing 2 causes 
the background color to exhibit a 50-percent transparency or opacity.

</para>




<para id="p1053">
It is important that the background color not be completely opaque. If it 
were opaque, it would not be possible to see the yellow moon and the yellow 
lightening bolts that are drawn on the canvas behind the background color.

</para>




<para id="p1054">
<emphasis id="strong1037" effect="bold">
Will change over time

</emphasis>
</para>




<para id="p1055">
The background color will be changed later in an event handler that is 
registered on a 

<emphasis id="strong1038" effect="bold">
Timer

</emphasis>
 object. The color will not only be 
subject to small random changes. It will also be subject to major changes 
switching between 
the periods when a lightening flash is occurring or not occurring.

</para>




<para id="p1056">
<emphasis id="strong1039" effect="bold">
The remainder of the constructor

</emphasis>
</para>




<para id="p1057">
The remainder of the constructor is shown in Listing 3. There is nothing new 
in Listing 3 so no explanation beyond the embedded comments should be needed.

</para>




<example id="listing1002" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_3" effect="bold">
</emphasis>
The remainder of the constructor.
</title>







<code id="pre1002" display="block">      //Load the two sky images and embed them in the
      // swf file.
      //Note the use of a / to eliminate the "Unable to 
      // resolve asset for transcoding" Compiler Error
      [Embed("/normalsky.jpg")]
      var imgNormal:Class;
      normalSky.load(imgNormal);
      
      [Embed("/flippedsky.jpg")]
      var imgFlipped:Class;
      flippedSky.load(imgFlipped);
      
      //Load the treeImage and embed it in the swf file.
      [Embed("/tree.png")]
      var imgTree:Class;
      tree.load(imgTree);
      
      
      //Load sound files and play two of them.
      sizzle = new Sound();
      sizzle.load(new URLRequest("sizzle.mp3"));
      
      thunder = new Sound();
      thunder.load(new URLRequest("thunder.mp3"));
      
      wind = new Sound();
      wind.load(new URLRequest("wind.mp3"));
      wind.play(0,2);//play twice
      
      rain = new Sound();
      rain.load(new URLRequest("rain.mp3"));
      rain.play(0, int.MAX_VALUE);//play forever
      
      
      //Register an event listener on the CREATION_
      // COMPLETE event.
      this.addEventListener(FlexEvent.CREATION_COMPLETE,
                                 creationCompleteHandler);

      //Save a reference to this Canvas object, which will
      // be used later for a variety of purposes.
      canvasObj = this;
      
      
      //Draw a yellow filled circle on this Canvas object.
      graphics.beginFill(0xffff00);
      graphics.drawCircle(circleX,circleY,radius);
      graphics.endFill();
      
    } //end constructor
</code>




</example>







<para id="p1058">
<emphasis id="strong1040" effect="bold">
The CREATION_COMPLETE event handler

</emphasis>
</para>




<para id="p1059">
The code in the constructor in Listing 3 registers a 

<emphasis id="strong1041" effect="bold">
CREATION_COMPLETE

</emphasis>
 
event handler on the 

<emphasis id="strong1042" effect="bold">
Canvas

</emphasis>
 object. You are already familiar 
with the use of event handlers of this type.

</para>




<para id="p1060">
The 

<emphasis id="strong1043" effect="bold">
CREATION_COMPLETE

</emphasis>
 event handler is shown in its entirety in Listing 4. As 
before, there is nothing in Listing 4 that I haven't explained in previous 
lessons, so no explanation beyond the embedded comments should be needed.

</para>




<example id="listing1003" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_4" effect="bold">
</emphasis>
The CREATION_COMPLETE event handler.
</title>







<code id="pre1003" display="block">    //This handler method is executed when the Canvas has
    // been fully created.
    private function creationCompleteHandler(
                          event:mx.events.FlexEvent):void{
      
      //Set the width and height of the Canvas object 
      // based on the size of the bitmap in the 
      // normalSky image.
      this.width = Bitmap(normalSky.content).width;
      this.height = Bitmap(normalSky.content).height;
      
      //Add the images to the Canvas object. Note that
      // the two images are overlaid at 0,0.
      this.addChild(normalSky);
      this.addChild(flippedSky);
      
      //Add a button in the upper-left corner in front 
      // of the sky images and register a CLICK event
      // handler on the button.
      button = new Button();
      button.x = 10;
      button.y = 10;
      button.addEventListener(MouseEvent.CLICK, onClick);
      button.label = "Click Me";
      button.setStyle("color", 0xFFFF00);
      addChild(button);
      
      
      //Get and save a reference to a Bitmap object
      // containing the contents of the tree file.
      treeBitMap = Bitmap(tree.content);
      
      //Place the treeBitMap in a new Image object and
      // place it on the canvas near the bottom center of
      // the canvas.
      treeBitMap.x = 
                 canvasObj.width / 2 - treeBitMap.width/2;
      treeBitMap.y = canvasObj.height - treeBitMap.height;

      newTreeImage.addChild(treeBitMap);
      this.addChild(newTreeImage);
      
      //Make the tree almost invisible. It will be made
      // highly visible in conjunction with a 
      // lightening flash.
      newTreeImage.alpha = 0.2;
      
      //Cause the blue background of the tree to
      // be transparent.
      processChromaKey(treeBitMap);

      
      //Register a timer listener and start the timer
      // running.
      timer.addEventListener(TimerEvent.TIMER, onTimer);
      timer.start();      

    } //end creationCompleteHandler
</code>




</example>







<para id="p1061">
<emphasis id="strong1044" effect="bold">
Beginning of the TIMER event handler

</emphasis>
</para>




<para id="p1062">
The last two statements in Listing 4 register a 

<emphasis id="strong1045" effect="bold">
TIMER

</emphasis>
 event 
listener on the 

<emphasis id="strong1046" effect="bold">
Timer

</emphasis>
 object that was instantiated in Listing 1 
and start the timer running.

</para>


	

<para id="p1063">
The 

<emphasis id="strong1047" effect="bold">
TIMER

</emphasis>
 event handler begins in Listing 5. There is some 
interesting new code in this method, so I will break it down and explain it in 
fragments.

</para>




<example id="listing1004" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_5" effect="bold">
</emphasis>
Beginning of the TIMER event handler.
</title>







<code id="pre1004" display="block">    //TimerEvent handler. This method is executed each
    // time the timer object fires an event.
    public function onTimer(event:TimerEvent):void {
      
      //Update the loop counter. Several things depend on
      // this counter.
      loopCntr++;
      if (loopCntr &gt; int.MAX_VALUE-2) {
        //Guard against numeric overflow.
        loopCntr = 0;
      }//end if
      
      //Play a wind sound every 100th timer event only
      // if a random value is greater than 0.5. This 
      // should happen half the time on the average.
      if ((loopCntr % 100 == 0)&amp;&amp; (Math.random() &gt; 0.5)) {
        wind.play();
      }//end if
      
      //Make random changes to the background color.
      processBackgroundColor();
      
      //Make changes to the alpha values of the normal
      // and flipped sky images.
      makeTheCloudsMove();
</code>




</example>







<para id="p1064">
<emphasis id="strong1048" effect="bold">
Approximately three Timer events per second

</emphasis>
</para>




<para id="p1065">
As you are aware, the event handler that begins in Listing 5 is executed each 
time the 

<emphasis id="strong1049" effect="bold">
Timer

</emphasis>
 object fires an event. The 

<emphasis id="strong1050" effect="bold">
Timer

</emphasis>
 
object was instantiated in Listing 1 and configured to fire an event every 35 
milliseconds, or approximately three times per second.

</para>




<para id="p1066">
The only thing that is new in the fragment shown in Listing 5 is the pair of 
calls to the methods named:

</para>




<list id="ul1007" list-type="bulleted">

	

<item id="li1038">
processBackgroundColor, and

</item>


	

<item id="li1039">
makeTheCloudsMove

</item>




</list>




<para id="p1067">
The purpose of each of these methods is described by its name. I will explain 
both methods later in this lesson.

</para>




<para id="p1068">
<emphasis id="strong1051" effect="bold">
Controlling the motion of the moon

</emphasis>
</para>




<para id="p1069">
The remainder of the 

<emphasis id="strong1052" effect="bold">
Timer

</emphasis>
 event handler, which is shown in 
Listing 6, is dedicated to causing the moon to move very slowly from left to 
right across the screen as shown in Figure 1 and Figure 2.

</para>




<example id="listing1005" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_6" effect="bold">
</emphasis>
Controlling the motion of the moon.
</title>







<code id="pre1005" display="block">      //Draw a filled circle on this Canvas object.
      if (!sizzlePlaying) {
        //Erase the circle. Note that this would also 
        // erase the lightening bolt if it were done while
        // the sizzle sound is playing.
        graphics.clear();
      }//end if
      
      //Make the circle move a very small distance to the
      // right. Make it wrap and reappear on the left
      //when it reaches the right side of the window.
      circleX += dx;
      if (circleX &gt; canvasObj.width - radius) {
        circleX = 5 * radius;
      }//end if
      graphics.beginFill(0xffff00);
      graphics.drawCircle(circleX,circleY,radius);
      graphics.endFill();
      
    }//end onTimer
</code>




</example>







<para id="p1070">
The code in Listing 6 draws a yellow filled circle a little further to the 
right each time the 

<emphasis id="strong1053" effect="bold">
Timer

</emphasis>
 fires an event. When the circle 
reaches the right edge of the Flash window, it starts over again on the left.

</para>


	

<para id="p1071">
<emphasis id="strong1054" effect="bold">
Erase the old moon before drawing the new moon

</emphasis>
</para>


	

<para id="p1072">
It is necessary to erase the old circle before drawing each new filled circle. 
	Otherwise, instead of seeing a filled circle moving from left to right, the 
	viewer would see a very wide yellow line being slowly drawn across the 
	screen.

</para>


	

<para id="p1073">
<emphasis id="strong1055" effect="bold">
Houston, we have a problem

</emphasis>
</para>


	

<para id="p1074">
The proper way to erase the old filled circle is to call the 

<emphasis id="strong1056" effect="bold">

	clear

</emphasis>
 method of the 

<emphasis id="strong1057" effect="bold">
Graphics

</emphasis>
 class. However, this 
	is also the proper way to erase the yellow lightening bolt that I will 
	explain later. Therefore, it is critical that the 

<emphasis id="strong1058" effect="bold">
clear

</emphasis>
 
	method not be called while the lightening bolt is on the screen.

</para>


	

<para id="p1075">
<emphasis id="strong1059" effect="bold">
The Boolean variable named sizzlePlaying

</emphasis>
</para>


	

<para id="p1076">
The 

<emphasis id="strong1060" effect="bold">
Boolean

</emphasis>
 variable named 

<emphasis id="strong1061" effect="bold">
sizzlePlaying

</emphasis>
 
	is used to control several aspects of the program relative to the period 
	during which the sizzle sound is played, the lightening bolt is drawn, and 
	the scene is illuminated by the lightening bolt. 

</para>


	

<para id="p1077">
The value of this variable 
	is set to false when the variable is declared in Listing 1. It is set to true when the sizzle sound begins playing and is set 
	back to false when 
	the sizzle sound finishes playing. Thus, it is always true while the sizzle 
	sound is playing and is false at all other times.

</para>




<para id="p1078">
<emphasis id="strong1062" effect="bold">
An egg-shaped moon

</emphasis>
</para>




<para id="p1079">
The value of 

<emphasis id="strong1063" effect="bold">
sizzlePlaying

</emphasis>
 is used in Listing 6 to 
	prevent the 

<emphasis id="strong1064" effect="bold">
clear

</emphasis>
 method from being called while the lightening bolt is 
on the screen. This actually causes the moon to take on a slight egg shape 
during that period because new versions of the moon are being drawn without 
erasing the old versions. However, this isn't visually apparent because the moon 
moves such a short distance during that period. Also, the lightening bolt and 
not the moon probably commands the attention of the viewer during this period so 
the distortion isn't very noticeable.

</para>




<para id="p1080">
Beyond that, no explanation of the code in Listing 6 beyond the embedded 
comments should be needed.

</para>




<para id="p1081">
<emphasis id="strong1065" effect="bold">
The method named processBackgroundColor

</emphasis>
</para>




<para id="p1082">
As you saw in Listing 5, the 

<emphasis id="strong1066" effect="bold">
Timer

</emphasis>
 event handler calls a 
method named 

<emphasis id="strong1067" effect="bold">
processBackgroundColor 

</emphasis>
each time the 

<emphasis id="strong1068" effect="bold">
Timer

</emphasis>
 
object fires an event 

<emphasis id="em1004" effect="italics">
(about three times per second)

</emphasis>
. The purpose of the 
method is to cause the overall color of the image to change slowly over time. 
The method is shown in its entirety in Listing 7.

</para>




<example id="listing1006" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_7" effect="bold">
</emphasis>
The method named processBackgroundColor.
</title>







<code id="pre1006" display="block">    //This method processes the background color. The
    // color changes among various shades of cyan when
    // there is no lightening bolt. The color changes
    // among various shades of dark yellow when there is a
    // lightening bolt.
    private function processBackgroundColor():void {
      if (!sizzlePlaying) {
        //Vary background color when there is no
        // lightening flash.
        if (Math.random() &gt; 0.5) {
          if (greenBkgnd &lt; 250){
            greenBkgnd += 5;
          }//end if
        }else {
          if(greenBkgnd &gt; 5){
            greenBkgnd -= 5;
          }//end if
        }//end else
        
        if (Math.random() &gt; 0.5) {
          if (blueBkgnd &lt; 250){
            blueBkgnd += 5;
          }//end if
        }else {
          if(blueBkgnd &gt; 5){
            blueBkgnd -= 5;
          }//end if
        }//end else
        
      }else {
        //Vary background color during a lightening flash
        if (Math.random() &gt; 0.5) {
          if (greenBkgnd &lt; 245){
            greenBkgnd += 10;
          }//end if
        }else {
          if(greenBkgnd &gt; 10){
            greenBkgnd -= 10;
          }//end if
        }//end else
        
        if (Math.random() &gt; 0.5) {
          if (redBkgnd &lt; 245){
            redBkgnd += 10;
          }//end if
        }else {
          if(redBkgnd &gt; 10){
            redBkgnd -= 10;
          }//end if
        }//end else
      }//end else

      bkgndColor = (redBkgnd &lt;&lt; 16) + (greenBkgnd &lt;&lt; 8)
                                              + blueBkgnd;
      setStyle("backgroundColor", bkgndColor);
      setStyle("backgroundAlpha",0.5);

    }//end processBackgroundColor
</code>




</example>







<para id="p1083">
<emphasis id="strong1069" effect="bold">
Long and tedious

</emphasis>
</para>




<para id="p1084">
The code in Listing 7 is long and tedious but not particularly complicated.

</para>




<para id="p1085">
<emphasis id="strong1070" effect="bold">
Three sections of code

</emphasis>
</para>




<para id="p1086">
The code can be broken down into three sections for purposes of explanation. The first section 
begins at the beginning of the 

<emphasis id="strong1071" effect="bold">
if

</emphasis>
 statement and continues down 
to, but not including the 

<emphasis id="strong1072" effect="bold">
else

</emphasis>
 clause. Note that the 
conditional clause for the 

<emphasis id="strong1073" effect="bold">
if

</emphasis>
 statement tests to determine if 
the value of the variable named 

<emphasis id="strong1074" effect="bold">
sizzlePlaying

</emphasis>
 is false.

</para>


	

<para id="p1087">
For a value of false, the code in the 

<emphasis id="strong1075" effect="bold">
if

</emphasis>
 statement makes 
very small random changes to the green and blue components of the background 
color during those periods when there is no lightening bolt on the screen. The 
value of the red color component is zero during this period.

</para>




<para id="p1088">
<emphasis id="strong1076" effect="bold">
The second section

</emphasis>
</para>




<para id="p1089">
The second section begins with the 

<emphasis id="strong1077" effect="bold">
else

</emphasis>
 clause, and the code 
in this section is executed when the value of 

<emphasis id="strong1078" effect="bold">
sizzlePlaying

</emphasis>
 is 
true.

</para>


	

<para id="p1090">
The code in this section makes very small random changes to the red and green 
components of the background color during those periods where there is a 
lightening bolt on the screen. The value of the blue color component is zero 
during this period.

</para>




<para id="p1091">
<emphasis id="strong1079" effect="bold">
The third section -- apply the color components

</emphasis>
</para>




<para id="p1092">
The third section of code, consisting of the last three statements, uses the 
red, green, and blue color component values computed earlier to cause 
the color of the background to change. Note that this code maintains a 
50-percent opacity value for the background color.

</para>




<para id="p1093">
<emphasis id="strong1080" effect="bold">
The method named makeTheCloudsMove

</emphasis>
</para>




<para id="p1094">
As you also saw in Listing 5, the 

<emphasis id="strong1081" effect="bold">
Timer

</emphasis>
 event handler also calls 
a method named 

<emphasis id="strong1082" effect="bold">
makeTheCloudsMove 

</emphasis>
each time the 

<emphasis id="strong1083" effect="bold">
Timer

</emphasis>
 
object fires an event, or about three times per second. The purpose of this 
method is to create the illusion that the clouds shown in Figure 1 and Figure 
2 are moving.

</para>


	

<para id="p1095">
<emphasis id="strong1084" effect="bold">
The one new thing

</emphasis>
</para>




<para id="p1096">
The procedure for accomplishing this is probably the only thing in this 
lesson that I haven explained in one form or another in an earlier lesson.

</para>




<para id="p1097">
The image of the clouds shown in Figure 1 and Figure 2 is actually the 
superposition of two images, one 
in front of the other. The two images are shown in Figure 4 and Figure 5.

</para>




<figure id="figure1003" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_4" effect="bold">
</emphasis>
The image named normalsky.jpg.
</title>



			

<media id="media1003" alt="Missing image" display="block">
<image id="img1003" mime-type="image/jpeg" src="../../media/as0170d.jpg" width="450" height="338"/>
</media>




<caption>The image named normalsky.jpg.</caption>
</figure>







<para id="p1098">
</para>




<figure id="figure1004" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_5" effect="bold">
</emphasis>
The image named flippedsky.jpg.
</title>



			

<media id="media1004" alt="Missing image" display="block">
<image id="img1004" mime-type="image/jpeg" src="../../media/as0170e.jpg" width="450" height="338"/>
</media>




<caption>The image named flippedsky.jpg.</caption>
</figure>







<para id="p1099">
<emphasis id="strong1085" effect="bold">
The differences between the images

</emphasis>
</para>


	

<para id="p1100">
If you examine these two images carefully, you will see that:

</para>




<list id="ul1008" list-type="bulleted">

	

<item id="li1040">
One is the mirror image of the other.

</item>


	

<item id="li1041">
One has been given a green tint while the other has been given a magenta 
	tint.

</item>




</list>




<para id="p1101">
As mentioned earlier, the program displays both of these images, one on top 
of the other.

</para>


	

<para id="p1102">
<emphasis id="strong1086" effect="bold">
The illusion of movement...

</emphasis>
</para>




<para id="p1103">
The illusion of movement is achieved by causing the alpha transparency 
value of one image to go down while the alpha transparency value of the other 
image goes up and vice versa. In other words, the two images are caused to gradually fade in and out in opposition to one another.

</para>


	

<para id="p1104">
<emphasis id="strong1087" effect="bold">
Beginning of the method named makeTheCloudsMove

</emphasis>
</para>




<para id="p1105">
The code that accomplishes this begins in Listing 8.

</para>




<example id="listing1007" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_8" effect="bold">
</emphasis>
Beginning of the method named  	makeTheCloudsMove.
</title>







<code id="pre1007" display="block">    //This method processes the alpha values of the
    // normal and flipped sky images.
    // The change in alpha values of the overlapping
    // images makes it appear that the clouds are
    // moving.
    private function makeTheCloudsMove():void {
      
      //Change the decreasing or increasing direction of
      // the changes in the alpha value for the normal
      // sky image when the alpha value hits the limits.
      if (normalAlphaDecreasing &amp;&amp; (normalAlpha &lt;= 0.1)) {
        normalAlphaDecreasing = false;
      }else if (!normalAlphaDecreasing &amp;&amp; 
                              (normalAlpha &gt;= alphaLim)) {
        normalAlphaDecreasing = true;
      }//end if

</code>




</example>







<para id="p1106">
<emphasis id="strong1088" effect="bold">
A saw tooth change in the alpha values

</emphasis>
</para>


	

<para id="p1107">
The alpha value for the normal sky image is caused to range from 
0.1 to 0.5 in increments of 0.005 in a saw tooth fashion. At the same time, the 
alpha value for the other image is caused to range between the same limits in an 
opposing saw tooth fashion.

</para>




<para id="p1108">
The code in Listing 8 keeps track whether the alpha values for the normal sky 
image are going up or going down, and flips the direction whenever the current 
alpha value crosses one of the limits.

</para>




<para id="p1109">
<emphasis id="strong1089" effect="bold">
Compute new alpha value for the normal sky

</emphasis>
</para>




<para id="p1110">
Listing 9 uses that information to compute a new alpha value for the normal 
sky image.

</para>




<example id="listing1008" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_9" effect="bold">
</emphasis>
Compute new alpha value for the normal sky  	image.
</title>







<code id="pre1008" display="block">      //Increase or decrease the alpha value for the
      // normal sky image.
      if (normalAlphaDecreasing) {
        normalAlpha -= 0.005;
      }else {
        normalAlpha += 0.005;
      }//end else

</code>




</example>







<para id="p1111">
<emphasis id="strong1090" effect="bold">
Compute new alpha value for the flipped sky image

</emphasis>
</para>




<para id="p1112">
Listing 10 uses the new alpha value for the normal sky along with the upper 
limit of the alpha value to compute a new alpha value for the flipped sky. As the alpha value for 
the normal sky goes up, the alpha value for the flipped sky goes down and vice 
versa.

</para>




<example id="listing1009" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_10" effect="bold">
</emphasis>
Compute new alpha value for the flipped sky  	image.
</title>







<code id="pre1009" display="block">      //Cause the alpha value for the flipped sky image
      // to go down when the value for the normal sky
      // image goes up, and vice versa.
      flippedAlpha = alphaLim - normalAlpha;
</code>




</example>







<para id="p1113">
<emphasis id="strong1091" effect="bold">
Apply the new alpha values to both sky images

</emphasis>
</para>




<para id="p1114">
Finally, Listing 10 sets the alpha value for each image to the new value.

</para>




<example id="listing1010" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_11" effect="bold">
</emphasis>
Apply the new alpha values to both sky  	images.
</title>







<code id="pre1010" display="block">      //Change the alpha values for both sky images.
      normalSky.alpha = normalAlpha;
      flippedSky.alpha = flippedAlpha;
    }//end makeTheCloudsMove
</code>




</example>







<para id="p1115">
The next time the images are rendered, the new alpha values will be in 
effect.

</para>




<para id="p1116">
<emphasis id="strong1092" effect="bold">
The CLICK event handler for the button

</emphasis>
</para>




<para id="p1117">
The button shown in Figure 1 provides the mechanism by which the viewer can 
interact with the program.

</para>


	

<para id="p1118">
The code in Listing 4 registers a 

<emphasis id="strong1093" effect="bold">
CLICK

</emphasis>
 event handler on 
	the button. Listing 12 shows that 

<emphasis id="strong1094" effect="bold">
CLICK

</emphasis>
 event handler. This method is called each time the user clicks the 
button.

</para>




<example id="listing1011" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_12" effect="bold">
</emphasis>
The CLICK event handler for the button.
</title>







<code id="pre1011" display="block">    //This method is a click handler on the button. It
    // causes the lightening flash to occur and the
    // lightening bolt to be drawn.
    private function onClick(event:MouseEvent):void {
      //Don't create another lightening bolt while the
      // previous one is still in progress.
      if(!sizzlePlaying){
        flashLightening();
        drawLightening();
      }//end if
    }//end onClick
</code>




</example>







<para id="p1119">
<emphasis id="strong1095" effect="bold">
Create the lightening bolt and its flash

</emphasis>
</para>


	

<para id="p1120">
The code in Listing 12 first confirms that the sizzle sound is not currently 
being played. If not, Listing 12 calls the method named 

<emphasis id="strong1096" effect="bold">
flashLightening

</emphasis>
 
to illuminate the scene, and calls the method named 

<emphasis id="strong1097" effect="bold">
drawLightening

</emphasis>
 
to draw the lightening bolt.

</para>




<para id="p1121">
<emphasis id="strong1098" effect="bold">
The method named flashLightening

</emphasis>
</para>




<para id="p1122">
The method named 

<emphasis id="strong1099" effect="bold">
flashLightening

</emphasis>
 is shown in its entirety in 
Listing 13.

</para>




<example id="listing1012" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_13" effect="bold">
</emphasis>
The method named flashLightening.
</title>







<code id="pre1012" display="block">    private function flashLightening():void {
      
      //Make the tree more visible. Apparently
      // setting the alpha property has no effect on the
      // alpha byte values that have been individually
      // set. Otherwise, the blue background would
      // become visible.
      newTreeImage.alpha = 1.0;
      

      //Play a sizzle sound to accompany the flash of
      // lightening. Set a flag to prevent another sizzle
      // sound from being played before this one finishes.
      sizzlePlaying = true;
      channel = sizzle.play();
      //Register an event listener that will be called
      // when the sizzle sound finishes playing.
      channel.addEventListener(
              Event.SOUND_COMPLETE, soundCompleteHandler);

      
      //Change the background color to a dark yellow.
      redBkgnd = 128;
      greenBkgnd = 128;
      blueBkgnd = 0;
                                    
    }//end flashLightening
</code>




</example>







<para id="p1123">
<emphasis id="strong1100" effect="bold">
Produce the visual and audible effects of the lightening

</emphasis>
</para>


	

<para id="p1124">
The purpose of this method is to produce the visible and audible effects 
	of the lightening other than the lightening bolt itself.

</para>


	

<para id="p1125">
The method creates the flash from thelightening bolt, makes the tree more visible during the flash as shown in Figure 2, and plays a sizzle sound 
	that will be followed by a clap of thunder.

</para>


	

<para id="p1126">
<emphasis id="strong1101" effect="bold">
Several steps are involved

</emphasis>
</para>


	

<para id="p1127">
The method begins by setting the alpha value on the tree image to 1.0 to cause 
	the tree to become totally opaque.

</para>


	

<para id="p1128">
Then it sets the value of the variable named 

<emphasis id="strong1102" effect="bold">
sizzlePlaying

</emphasis>
 
	to true to notify all other parts of the program that a sizzle sound is 
	being played and a lightening bolt is being drawn.

</para>


	

<para id="p1129">
Then it calls the 

<emphasis id="strong1103" effect="bold">
play

</emphasis>
 method on the 

<emphasis id="strong1104" effect="bold">
sizzle

</emphasis>

	

<emphasis id="strong1105" effect="bold">
Sound

</emphasis>
. The 

<emphasis id="strong1106" effect="bold">
play

</emphasis>
 method starts the sizzle 
	sound playing and immediately returns a reference to a 

<emphasis id="strong1107" effect="bold">
SoundChannel

</emphasis>
 
	object through which the sound will be played.

</para>


	

<para id="p1130">
The reference to the 

<emphasis id="strong1108" effect="bold">
SoundChannel

</emphasis>
 object is saved in the 
	instance variable named 

<emphasis id="strong1109" effect="bold">
channel

</emphasis>
.

</para>


	

<para id="p1131">
Listing 13 registers an event listener on the 

<emphasis id="strong1110" effect="bold">
SoundChannel

</emphasis>
 
	object that will be executed when the sizzle sound finishes playing.

</para>


	

<para id="p1132">
Finally, Listing 13 sets the red, green, and blue background color 
	component values to dark yellow. These values along with the true value of
	

<emphasis id="strong1111" effect="bold">
sizzlePlaying

</emphasis>
 will be used by the code in Listing 7 to set 
	the background color of the canvas to dark yellow the next time the 

<emphasis id="strong1112" effect="bold">

	Timer

</emphasis>
 object 
fires an event.

</para>




<para id="p1133">
<emphasis id="strong1113" effect="bold">
The drawLightening method

</emphasis>
</para>




<para id="p1134">
Listing 14 shows the method named 

<emphasis id="strong1114" effect="bold">
drawLightening

</emphasis>
 that is 
called by the 

<emphasis id="strong1115" effect="bold">
CLICK

</emphasis>
 event handler on the button in Listing 12 
to draw the actual lightening bolt.

</para>




<example id="listing1013" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_14" effect="bold">
</emphasis>
The method named drawLightening.
</title>







<code id="pre1013" display="block">    private function drawLightening():void {
      
      lighteningStartX = Math.floor(Math.random() 
                                    * canvasObj.width / 3)
                                    + canvasObj.width / 3;
      lighteningStartY = 
                    Math.random() * canvasObj.height / 10;
      lighteningEndX = canvasObj.width / 2 -6;
      lighteningEndY = 
                canvasObj.height - treeBitMap.height + 10;
      
      //Draw a zero width dark yellow line to the starting
      // point of the lightening bolt.
      canvasObj.graphics.lineStyle(0, 0x999900);
      canvasObj.graphics.lineTo(
                      lighteningStartX, lighteningStartY);
      
      //Set the line style to a bright yellow line that is
      // four pixels thick.
      canvasObj.graphics.lineStyle(4, 0xFFFF00);
      
      //Declare working variables.
      var tempX:uint;
      var tempY:uint = lighteningStartY;
      var cnt:uint;
      
      //Use a for loop to draw a lightening bolt with 
      // twenty random segments.
      for (cnt = 0; cnt &lt; 20; cnt++ ) {
        //Compute the coordinates of the end of the next
        // line segment.
        tempX = Math.floor(Math.random() 
                                    * canvasObj.width / 3)
                                    + canvasObj.width / 3;
        tempY = tempY + Math.floor(Math.random() 
                            * (lighteningEndY - tempY)/5);
        //Draw the line segment.
        canvasObj.graphics.lineTo(tempX,tempY);
      }//end for loop
      
      //Draw a line segment to the top of the tree.
      canvasObj.graphics.lineTo(
                          lighteningEndX, lighteningEndY);
              
      //Make the lightening go to ground.
      canvasObj.graphics.lineTo(
          lighteningEndX, 
             lighteningEndY + treeBitMap.height - 20);
    }//end drawLightening
</code>




</example>





	

<para id="p1135">
This method draws a yellow segmented lightening
    bolt four pixels thick 

<emphasis id="em1005" effect="italics">
(as shown in Figure 2)

</emphasis>
 that is generally 
	random but always ends up striking the top of the tree.

</para>




<para id="p1136">
<emphasis id="strong1116" effect="bold">
Long and tedious

</emphasis>
</para>




<para id="p1137">
As was the case earlier, this method is long and tedious but not technically 
difficult. Therefore, I will leave it as an exercise for the student to wade 
through the details in order to understand how it draws the lightening bolt.

</para>




<para id="p1138">
<emphasis id="strong1117" effect="bold">
The method named soundCompleteHandler

</emphasis>
</para>




<para id="p1139">
That brings us to the method shown in Listing 15 that is called each time a sizzle sound finishes 
playing.

</para>




<example id="listing1014" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_15" effect="bold">
</emphasis>
The method named soundCompleteHandler.
</title>







<code id="pre1014" display="block">    private function soundCompleteHandler(e:Event):void {
      
      //Allow another sizzle sound to be played now that 
      // this one is finished.
      sizzlePlaying = false;
      //Play the thunder immediately following the end of
      // the sizzle sound.
      thunder.play();
      
      //Switch the background color from dark yellow
      // to the normal background color.
      redBkgnd = 0;
      greenBkgnd = 128;
      blueBkgnd = 128;
      
      //Erase the lightening bolt. Note that this will
      // also erase the yellow circle.
      canvasObj.graphics.clear();
      //Make the tree almost invisible.
      newTreeImage.alpha = 0.2;
      
    }//end soundCompleteHandler
</code>




</example>







<para id="p1140">
Each time this method is called, it sets the 

<emphasis id="strong1118" effect="bold">
sizzlePlaying

</emphasis>
 
variable to false to clear the way for the sizzle sound to be played again.

</para>




<para id="p1141">
Then it plays the thunder sound and sets the color variables so that the 
background color will be restored to a dark cyan color by the code in Listing 7.

</para>




<para id="p1142">
Finally it calls the 

<emphasis id="strong1119" effect="bold">
clear

</emphasis>
 method of the 

<emphasis id="strong1120" effect="bold">
Graphics

</emphasis>
 
class to erase the lightening bolt, which also erases the moon as well.

</para>




<para id="p1143">
Then it sets the alpha value on the tree image to a low value to make the 
tree appear to be lost in the fog.

</para>




<para id="p1144">
<emphasis id="strong1121" effect="bold">
The method named processChromaKey

</emphasis>
</para>




<para id="p1145">
That leaves only the method named 

<emphasis id="strong1122" effect="bold">
processChromaKey

</emphasis>
 that I 
haven't explained. The purpose of this method is to cause the blue background 
pixels of the tree image shown in Figure 6 to become transparent.

</para>




<figure id="figure1005" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_6" effect="bold">
</emphasis>
The tree image.
</title>



		

<media id="media1005" alt="Missing image" display="block">
<image id="img1005" mime-type="image/png" src="../../media/as0170f.png" width="134" height="194"/>
</media>




<caption>The tree image.</caption>
</figure>







<para id="p1146">
This method is essentially the same as a method that I explained in an 
earlier lesson titled 

<emphasis id="strong1123" effect="bold">
Using Chroma Key Compositing to Create Transparent 
Backgrounds

</emphasis>
. Rather than to explain that method again, I will simply 
refer you to the earlier lesson for an explanation. You can view the method in 
its entirety in Listing 17.

</para>






</section>
</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>






<para id="p1147">
I encourage you to


<link id="a1043" target-id="Click">

run

</link>

 this program from the web. 
Then copy the code from Listing 16 and Listing 17. Use that code to 
create your own project. Compile and run the project. Experiment with 
the code, making changes, and observing the results of your changes. Make 
certain that you can explain why your changes behave as they do. 

</para>




</section>
<section id="h11006">
<title>
<emphasis id="Resources" effect="bold">

Resources

</emphasis>


</title>




<para id="p1148">
I will publish a list containing links to ActionScript resources as a 
separate document. Search for ActionScript Resources in the 
Connexions search box.

</para>






</section>
<section id="h11007">
<title>
 

<emphasis id="Complete_program_listing" effect="bold">

Complete program listings

</emphasis>


</title>






<para id="p1149">
 Complete listings of the programs discussed in this lesson 
are provided below.

</para>





<example id="listing1015" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_16" effect="bold">
</emphasis>
Code for Main.mxml
</title>







<code id="pre1015" display="block">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!--
Project LighteningStorm01
See Driver.as for a description of this project.
--&gt;

&lt;mx:Application 
  xmlns:mx="http://www.adobe.com/2006/mxml" 
  xmlns:cc="CustomClasses.*"&gt;
  
  &lt;cc:Driver/&gt;

&lt;/mx:Application&gt;</code>




</example>







<para id="p1150">
</para>




<example id="listing1016" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_17" effect="bold">
</emphasis>
Source code for the class named Driver.
</title>







<code id="pre1016" display="block">/*Project LighteningStorm01
This project is the culmination of several previous 
projects dealing with animation, sound, transparency,
mouse events, chromakey, etc.

When the program starts running, the scene is of a very
stormy day. There is a button in the upper-left corner
of the scene. The clouds are moving. There is also a
yellow moon behind the clouds that is moving very 
slowly across the screen from left to right.

When the user clicks the button, a bolt of lightening
comes out of the sky and strikes an image of a tree. 
Several aspects of the scene change to reflect 
the sights and sounds of a lightening strike.

In addition to the clouds moving, the overall color
of the scene slowly changes randomly. The overall
color varies around a dark cyan when there is no
lightening bolt and varies around a dark yellow when
there is a lightening bolt.

This project was developed using FlashDevelop, which
has a couple of requirements that may not exist with
Flex Builder 3 or Flash Builder 4.
1. You must manually copy all mp3 files into the bin
folder.
2. You must insert an extra slash character in the URL
when embedding an image file in the swf file.
*********************************************************/
package CustomClasses{
  import flash.display.Bitmap;
  import flash.display.BitmapData;
  import flash.media.SoundChannel;
  import mx.containers.Canvas;
  import mx.controls.Image;
  import mx.controls.Button;
  import mx.events.FlexEvent;
  import flash.events.TimerEvent;
  import flash.events.MouseEvent;
  import flash.utils.Timer;
  import flash.utils.ByteArray;
  import flash.media.Sound;
  import flash.net.URLRequest;
  import flash.media.SoundChannel;
  import flash.events.Event;
  import flash.geom.Rectangle;

  
  //====================================================//
  
  public class Driver extends Canvas {
    //Extending Canvas makes it possible to position
    // images with absolute coordinates. The default
    // location is 0,0;
    
    private var bkgndColor:uint = 0x005555;
    private var redBkgnd:uint = 0;
    private var greenBkgnd:uint = 128;
    private var blueBkgnd:uint = 128;
    
    private var normalSky:Image = new Image();    
    private var flippedSky:Image = new Image();
  
    private var tree:Image = new Image();
    private var newTreeImage:Image = new Image();
    private var treeBitMap:Bitmap;
    
    private var alphaLim:Number = 0.5;
    private var normalAlpha:Number = alphaLim;
    private var flippedAlpha:Number;
    private var normalAlphaDecreasing:Boolean = true;

    private var canvasObj:Canvas;
    private var timer:Timer = new Timer(35);
    private var loopCntr:uint;
    
    private var lighteningCntr:uint = 0;
    private var lighteningCntrLim:uint = 25;
    private var lighteningStartX:uint;
    private var lighteningStartY:uint;
    private var lighteningEndX:uint;
    private var lighteningEndY:uint;
    
    private var sizzle:Sound;
    private var thunder:Sound;
    private var wind:Sound;
    private var rain:Sound;
    
    private var sizzlePlaying:Boolean = false;
    private var channel:SoundChannel;
    
    private var button:Button;
    
    private var radius:Number = 24;//radius of circle
    private var circleX:Number = 5 * radius;
    private var circleY:Number = 1.5 * radius;
    private var dx:Number = 0.05;
    //--------------------------------------------------//

    
    public function Driver(){//constructor
      //Make this Canvas visible.
      bkgndColor = (redBkgnd &lt;&lt; 16) + (greenBkgnd &lt;&lt; 8) 
                                              + blueBkgnd;
      setStyle("backgroundColor", bkgndColor);
      setStyle("backgroundAlpha",0.5);

      //Load the two sky images and embed them in the
      // swf file.
      //Note the use of a / to eliminate the "Unable to 
      // resolve asset for transcoding" Compiler Error
      [Embed("/normalsky.jpg")]
      var imgNormal:Class;
      normalSky.load(imgNormal);
      
      [Embed("/flippedsky.jpg")]
      var imgFlipped:Class;
      flippedSky.load(imgFlipped);
      
      //Load the . treeImage and embed it in the swf file.
      [Embed("/tree.png")]
      var imgTree:Class;
      tree.load(imgTree);
      
      
      //Load sound files and play two of them.
      sizzle = new Sound();
      sizzle.load(new URLRequest("sizzle.mp3"));
      
      thunder = new Sound();
      thunder.load(new URLRequest("thunder.mp3"));
      
      wind = new Sound();
      wind.load(new URLRequest("wind.mp3"));
      wind.play(0,2);//play twice
      
      rain = new Sound();
      rain.load(new URLRequest("rain.mp3"));
      rain.play(0, int.MAX_VALUE);//play forever
      
      
      //Register an event listener on the CREATION_
      // COMPLETE event.
      this.addEventListener(FlexEvent.CREATION_COMPLETE,
                                 creationCompleteHandler);

      //Save a reference to this Canvas object, which will
      // be used later for a variety of purposes.
      canvasObj = this;
      
      
      //Draw a yellow filled circle on this Canvas object.
      graphics.beginFill(0xffff00);
      graphics.drawCircle(circleX,circleY,radius);
      graphics.endFill();
      
    } //end constructor
    //--------------------------------------------------//

    //This handler method is executed when the Canvas has
    // been fully created.
    private function creationCompleteHandler(
                          event:mx.events.FlexEvent):void{
      
      //Set the width and height of the Canvas object 
      // based on the size of the bitmap in the 
      // normalSky image.
      this.width = Bitmap(normalSky.content).width;
      this.height = Bitmap(normalSky.content).height;
      
      //Add the images to the Canvas object. Note that
      // the two images are overlaid at 0,0.
      this.addChild(normalSky);
      this.addChild(flippedSky);
      
      //Add a button at in the upper-left corner in front 
      // of the sky images.
      button = new Button();
      button.x = 10;
      button.y = 10;
      button.addEventListener(MouseEvent.CLICK, onClick);
      button.label = "Click Me";
      button.setStyle("color", 0xFFFF00);
      addChild(button);
      
      
      //Get and save a reference to a Bitmap object
      // containing the contents of the tree file.
      treeBitMap = Bitmap(tree.content);
      
      //Place the treeBitMap in a new Image object and
      // place it on the canvas near the bottom center of
      // the canvas.
      treeBitMap.x = 
                 canvasObj.width / 2 - treeBitMap.width/2;
      treeBitMap.y = canvasObj.height - treeBitMap.height;

      newTreeImage.addChild(treeBitMap);
      this.addChild(newTreeImage);
      
      //Make the tree almost invisible. It will be made
      // highly visible in conjunction with a 
      // lightening flash.
      newTreeImage.alpha = 0.2;
      
      //Cause the blue background of the tree to
      // be transparent.
      processChromaKey(treeBitMap);

      
      //Register a timer listener and start the timer
      // running.
      timer.addEventListener(TimerEvent.TIMER, onTimer);
      timer.start();      

    } //end creationCompleteHandler
    //--------------------------------------------------//
    
    //TimerEvent handler. This method is executed each
    // time the timer object fires an event.
    public function onTimer(event:TimerEvent):void {
      
      //Update the loop counter. Several things depend on
      // this counter.
      loopCntr++;
      if (loopCntr &gt; int.MAX_VALUE-2) {
        //Guard against numeric overflow.
        loopCntr = 0;
      }//end if
      
      //Play a wind sound every 100th timer event only
      // if a random value is greater than 0.5. This 
      // should happen half the time on the average.
      if ((loopCntr % 100 == 0)&amp;&amp; (Math.random() &gt; 0.5)) {
        wind.play();
      }//end if
      
      //Make random changes to the background color.
      processBackgroundColor();
      
      //Make changes to the alpha values of the normal
      // and flipped sky images.
      makeTheCloudsMove();
      
      //Draw a filled circle on this Canvas object.
      if (!sizzlePlaying) {
        //Erase the circle. Note that this would also 
        // erase the lightening bolt if it were done while
        // the sizzle sound is playing.
        graphics.clear();
      }//end if
      
      //Make the circle move a very small distance to the
      // right. Make it wrap and reappear on the left
      //when it reaches the right side of the window.
      circleX += dx;
      if (circleX &gt; canvasObj.width - radius) {
        circleX = 5 * radius;
      }//end if
      graphics.beginFill(0xffff00);
      graphics.drawCircle(circleX,circleY,radius);
      graphics.endFill();
      
    }//end onTimer
    //--------------------------------------------------//
    
    //This function processes the background color. The
    // color changes among various shades of cyan when
    // there is no lightening bolt. The color changes
    // among various shades of dark yellow when there is a
    // lightening bolt.
    private function processBackgroundColor():void {
      if (!sizzlePlaying) {
        //Vary background color when there is no
        // lightening flash.
        if (Math.random() &gt; 0.5) {
          if (greenBkgnd &lt; 250){
            greenBkgnd += 5;
          }//end if
        }else {
          if(greenBkgnd &gt; 5){
            greenBkgnd -= 5;
          }//end if
        }//end else
        
        if (Math.random() &gt; 0.5) {
          if (blueBkgnd &lt; 250){
            blueBkgnd += 5;
          }//end if
        }else {
          if(blueBkgnd &gt; 5){
            blueBkgnd -= 5;
          }//end if
        }//end else
        
      }else {
        //Vary background color during a lightening flash
        if (Math.random() &gt; 0.5) {
          if (greenBkgnd &lt; 245){
            greenBkgnd += 10;
          }//end if
        }else {
          if(greenBkgnd &gt; 10){
            greenBkgnd -= 10;
          }//end if
        }//end else
        
        if (Math.random() &gt; 0.5) {
          if (redBkgnd &lt; 245){
            redBkgnd += 10;
          }//end if
        }else {
          if(redBkgnd &gt; 10){
            redBkgnd -= 10;
          }//end if
        }//end else
      }//end else

      bkgndColor = (redBkgnd &lt;&lt; 16) + (greenBkgnd &lt;&lt; 8)
                                              + blueBkgnd;
      setStyle("backgroundColor", bkgndColor);
      setStyle("backgroundAlpha",0.5);

    }//end processBackgroundColor
    //--------------------------------------------------//
    
    //This function processes the alpha values of the
    // normal and flipped sky images.
    // The change in alpha values of the overlapping
    // images makes it appear that the clouds are
    // moving.
    private function makeTheCloudsMove():void {
      
      //Change the decreasing or increasing direction of
      // the changes in the alpha value for the normal
      // sky image when the alpha value hits the limits.
      if (normalAlphaDecreasing &amp;&amp; (normalAlpha &lt;= 0.1)) {
        normalAlphaDecreasing = false;
      }else if (!normalAlphaDecreasing &amp;&amp; 
                              (normalAlpha &gt;= alphaLim)) {
        normalAlphaDecreasing = true;
      }//end if

      //Increase or decrease the alpha value for the
      // normal sky image.
      if (normalAlphaDecreasing) {
        normalAlpha -= 0.005;
      }else {
        normalAlpha += 0.005;
      }//end else

      //Cause the alpha value for the flipped sky image
      // to go down when the value for the normal sky
      // image goes up, and vice versa.
      flippedAlpha = alphaLim - normalAlpha;
      
      //Change the alpha values for both sky images.
      normalSky.alpha = normalAlpha;
      flippedSky.alpha = flippedAlpha;
    }//end makeTheCloudsMove
    //--------------------------------------------------//
    
    //This function creates a flash of lightening. It
    // also makes the tree more visible during
    // the flash and plays a sizzle sound followed by a
    // clap of thunder. This method simply initiates these
    // actions. They are completed later by an event
    // handler registered on the SoundChannel object.
    private function flashLightening():void {
      
      //Make the tree more visible. Apparently
      // setting the alpha property has no effect on the
      // alpha byte values that have been individually
      // set. Otherwise, the blue background would
      // become visible.
      newTreeImage.alpha = 1.0;
      

      //Play a sizzle sound to accompany the flash of
      // lightening. Set a flag to prevent another sizzle
      // sound from being played before this one finishes.
      sizzlePlaying = true;
      channel = sizzle.play();
      //Register an event listener that will be called
      // when the sizzle sound finishes playing.
      channel.addEventListener(
              Event.SOUND_COMPLETE, soundCompleteHandler);

      
      //Change the background color to a dark yellow.
      redBkgnd = 128;
      greenBkgnd = 128;
      blueBkgnd = 0;
                                    
    }//end flashLightening
    //--------------------------------------------------//
    
    //This method is called each time the sizzle sound
    // finishes playing. Each time it is called, it plays
    // a thunder sound and clears a flag making it
    // possible for another sizzle sound to be played. It
    // also restores the background color to a dark cyan,
    // erases the lightening bolt, and causes the tree to
    // become almost invisible.
    private function soundCompleteHandler(e:Event):void {
      
      //Allow another sizzle sound to be played now that 
      // this one is finished.
      sizzlePlaying = false;
      //Play the thunder immediately following the end of
      // the sizzle sound.
      thunder.play();
      
      //Switch the background color from dark yellow
      // to the normal background color.
      redBkgnd = 0;
      greenBkgnd = 128;
      blueBkgnd = 128;
      
      //Erase the lightening bolt. Note that this will
      // also erase the yellow circle.
      canvasObj.graphics.clear();
      //Make the tree almost invisible.
      newTreeImage.alpha = 0.2;
      
    }//end soundCompleteHandler
    //--------------------------------------------------//
    
    //This method draws a yellow segmented lightening
    // bolt that is generally random but always ends up
    // at the location where the tree is standing.
    private function drawLightening():void {
      
      lighteningStartX = Math.floor(Math.random() 
                                    * canvasObj.width / 3)
                                    + canvasObj.width / 3;
      lighteningStartY = 
                    Math.random() * canvasObj.height / 10;
      lighteningEndX = canvasObj.width / 2 -6;
      lighteningEndY = 
                canvasObj.height - treeBitMap.height + 10;
      
      //Draw a zero width dark yellow line to the starting
      // point of the lightening bolt.
      canvasObj.graphics.lineStyle(0, 0x999900);
      canvasObj.graphics.lineTo(
                      lighteningStartX, lighteningStartY);
      
      //Set the line style to a bright yellow line that is
      // four pixels thick.
      canvasObj.graphics.lineStyle(4, 0xFFFF00);
      
      //Declare working variables.
      var tempX:uint;
      var tempY:uint = lighteningStartY;
      var cnt:uint;
      
      //Use a for loop to draw a lightening bolt with 
      // twenty random segments.
      for (cnt = 0; cnt &lt; 20; cnt++ ) {
        //Compute the coordinates of the end of the next
        // line segment.
        tempX = Math.floor(Math.random() 
                                    * canvasObj.width / 3)
                                    + canvasObj.width / 3;
        tempY = tempY + Math.floor(Math.random() 
                            * (lighteningEndY - tempY)/5);
        //Draw the line segment.
        canvasObj.graphics.lineTo(tempX,tempY);
      }//end for loop
      
      //Draw a line segment to the top of the tree.
      canvasObj.graphics.lineTo(
                          lighteningEndX, lighteningEndY);
              
      //Make the lightening go to ground.
      canvasObj.graphics.lineTo(
          lighteningEndX, 
             lighteningEndY + treeBitMap.height - 20);
    }//end drawLightening
    //--------------------------------------------------//
    
    //This method is a click handler on the button. It
    // causes the lightening flash to occur and the
    // lightening bolt to be drawn.
    private function onClick(event:MouseEvent):void {
      //Don't create another lightening bolt while the
      // previous one is still in progress.
      if(!sizzlePlaying){
        flashLightening();
        drawLightening();
      }//end if
    }//end onClick
    //--------------------------------------------------//
    
    //This method identifies all of the pixels in the
    // incoming bitmap with a pure blue color and sets
    // the alpha bytes for those pixels to a value of
    // zero. Apparently those bytes are not affected by
    // later code that sets the alpha property of the
    // Image object to another value.
    private function processChromaKey(bitmap:Bitmap):void{
      //Get the BitmapData object.
      var bitmapData:BitmapData = bitmap.bitmapData;

      //Get a one-dimensional byte array of pixel data
      // from the bitmapData object. Note that the
      // pixel data format is ARGB.
      var rawBytes:ByteArray = new ByteArray();
      rawBytes = bitmapData.getPixels(new Rectangle(
               0,0,bitmapData.width,bitmapData.height));
      
      var cnt:uint;
      var red:uint;
      var green:uint;
      var blue:uint;
      
      for (cnt = 0; cnt &lt; rawBytes.length; cnt += 4) {
        //alpha is in rawBytes[cnt]
        red = rawBytes[cnt + 1];
        green = rawBytes[cnt + 2];
        blue = rawBytes[cnt + 3];
        
        if ((red == 0) &amp;&amp; (green == 0 ) &amp;&amp; 
                                          (blue == 255)) {
          //The color is pure blue. Set the value
          // of the alpha byte to zero.
          rawBytes[cnt] = 0;
        }//end if

      }//end for loop      
      //Put the modified pixels back into the bitmapData
      // object.
      rawBytes.position = 0;//this is critical
      bitmapData.setPixels(new Rectangle(
                0,0,bitmapData.width,bitmapData.height),
                rawBytes);
    
    } //end processChromaKey method
    //--------------------------------------------------//
  } //end class
} //end package</code>




</example>







<para id="p1151">
</para>






</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>




<para id="p1152">
This section contains a variety of miscellaneous materials.

</para>







<note id="note1003" type="miscellaneous">







<emphasis id="strong1124" effect="bold">
Housekeeping material

</emphasis>



<list id="ul1009" list-type="bulleted">



<item id="li1042">
Module name: Combining Sound with Motion and Image Animation

</item>




<item id="li1043">
Files:

<list id="ul1010" list-type="bulleted">



<item id="li1044">
ActionScript0170\ActionScript0170.htm

</item>




<item id="li1045">
ActionScript0170\Connexions\ActionScriptXhtml0170.htm

</item>




</list>




</item>




</list>




</note>









<note id="note1004" type="miscellaneous">




<emphasis id="strong1125" effect="bold">
PDF disclaimer:

</emphasis>
 Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.


</note>









<para id="p1153">
-end- 

</para>





</section>
</content>




</document>